### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplybymodularinteger
name: MultiplyByModularInteger
type: operation
namespace: microsoft.quantum.arithmetic
summary: >-
  이상 비트 레지스터에서 정수 상수로 모듈식 곱하기를 수행 합니다.


  `modulus`$N $ 및 $a $를 사용 하 여 나타냅니다 `constMultiplier` .

  그런 다음이 작업은 계산 단위로 정의 된 단일 작업을 구현 합니다. $ $ \begin{align} \ket{y} \maps\ket{(a \mapsto y) \operatorname{mod} N} \end{align} $ $ (모든 $y $ between $0 $N $-$1)
remarks: >-
  - 회로 다이어그램 및 설명의 경우 [8 페이지의 arXiv: daant-ph/0205095v3 페이지](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=8) 에서 그림 7을 참조 하세요.

  - 이 작업은 [Arxiv: ₐ/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf) 의 u에 해당 합니다.
syntax: 'operation MultiplyByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    summary: 승수를 곱할 때 기준이 되는 상수입니다. 모듈러스 여야 합니다.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: 곱하기 연산은 모듈로 수행 됩니다 `modulus` .
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: >-
      상수로 곱할 숫자입니다.

      이는 작은 endian 형식의 정수를 인코딩 하는 배열입니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 4ebbe9808772f51b1a7b2b3caf47379e74bd823e
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89353518"
