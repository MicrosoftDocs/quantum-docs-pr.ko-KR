### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplybymodularinteger
name: MultiplyByModularInteger
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: >-
  이상 비트 레지스터에서 정수 상수로 모듈식 곱하기를 수행 합니다.


  에서 모듈러스를 N 및 constMultiplier로 표시 하면이 연산은 계산 기준으로 정의 된 단일을 구현 합니다. | y ⟩ ↦ | a ⋅ y (mod N) ⟩, 0과 N-1 사이의 모든 y
remarks: >-
  - 회로 다이어그램 및 설명의 경우 [8 페이지의 arXiv: daant-ph/0205095v3 페이지](https://arxiv.org/pdf/quant-ph/0205095v3.pdf#page=8) 에서 그림 7을 참조 하세요.

  - 이 작업은 [Arxiv: ₐ/0205095v3](https://arxiv.org/pdf/quant-ph/0205095v3.pdf) 의 u에 해당 합니다.
syntax: 'operation MultiplyByModularInteger (constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(constMultiplier : Int, modulus : Int, multiplier : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: constMultiplier
    summary: 승수를 곱할 때 기준이 되는 상수입니다. 모듈러스 여야 합니다.
    isPrimitive: true
    uid: Int
  - name: modulus
    summary: 곱하기 연산은 모듈로 수행 됩니다 `modulus`
    isPrimitive: true
    uid: Int
  - name: multiplier
    summary: >-
      상수로 곱할 숫자입니다.

      이는 작은 endian 비트 순서로 정수를 나타내는 값의 배열입니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
ms.openlocfilehash: 4a99aff903b22ad4edcd96f2a980bd65c740025f
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 10/31/2019
ms.locfileid: "73218756"
