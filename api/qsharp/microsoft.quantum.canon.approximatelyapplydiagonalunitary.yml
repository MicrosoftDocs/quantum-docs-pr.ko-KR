### YamlMime:QSharpType
uid: microsoft.quantum.canon.approximatelyapplydiagonalunitary
name: ApproximatelyApplyDiagonalUnitary
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  지정 된 허용 오차에 따라 작은 회전 각도를 잘라내는 상위 비트 레지스터의 숫자 기반 상태에 복잡 한 단계의 배열을 적용 합니다.


  이 작업에서는 $n $-stbit number state $ \ket{j} $에 $e ^ {i \ theta_j} $ 복합 단계를 적용 하는 대각선을 구현 합니다.

  특히이 작업은 단일 개체로 나타낼 수 있습니다.


  $ $ \begin{align} U = \sum ^ {2 ^ n-1} _ {j = 0} e ^ {i \ theta_j} \ket{j}\bra{j}.

  \end{align} $ $
remarks: $2 ^ n $ 미만으로 지정 된 경우 `coefficients`는 $ \ theta_j = $0.0 요소로 채워집니다.
syntax: 'operation ApproximatelyApplyDiagonalUnitary (tolerance : Double, coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: '- 퀀텀 논리 회로 Vivek Shende, Stephen S., Markov https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(tolerance : Double, coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: tolerance
    summary: 작은 계수를 잘라내는 허용 오차입니다.
    isPrimitive: true
    uid: Double
  - name: coefficients
    summary: 최대 $2 ^ n $ 계수 $ \ theta_j $의 배열입니다. $J $ th 계수는 작은 endian 형식으로 인코딩된 number state $ \ket{j} $를 인덱싱합니다.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: qubits
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- applydiagonalunitary
metadata:
  ms.openlocfilehash: 9d2ee3254a3cd7c182ae6b4a57a6c48a993fa679
  ms.sourcegitcommit: 6ccea4a2006a47569c4e2c2cb37001e132f17476
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 02/28/2020
  ms.locfileid: "77907956"
