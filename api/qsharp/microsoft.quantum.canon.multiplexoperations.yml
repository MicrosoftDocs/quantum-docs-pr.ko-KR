### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexoperations
name: MultiplexOperations
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  숫자 상태의 배열에 의해 제어 되는 작업 배열을 적용 합니다.


  즉, $n $ \ket{j} $로 제어 될 때 단일 $V _j $를 적용 하는 곱하기 제어 된 단일 $U 작업을 적용 합니다.


  $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
remarks: $2 ^ n $ 미만으로 지정 된 경우 `coefficients`는 id 요소로 채워집니다. 이 구현에서는 $n-$1 ancilla (비트)를 사용 합니다.
syntax: "operation MultiplexOperations (unitaries : ('T => Unit is Adj + Ctl)[], index : Microsoft.Quantum.Arithmetic.LittleEndian, target : 'T) : Unit"
references: '- 퀀텀 속도 Andrew Childs, Dmitri Maslov, Yunseong 베트남, Neil Ross 위안, https://arxiv.org/abs/1711.10980 Su를 사용 하 여 첫 번째 퀀텀 시뮬레이션을 지향 합니다.'
input:
  content: "(unitaries : ('T => Unit is Adj + Ctl)[], index : Microsoft.Quantum.Arithmetic.LittleEndian, target : 'T)"
  types:
  - name: unitaries
    summary: 최대 $2 ^ n $ 단일 작업의 배열입니다. $J $ th 연산은 작은 endian 형식으로 인코딩된 숫자 상태 $ \ket{j} $로 인덱싱됩니다.
    isArray: true
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: index
    summary: 숫자 상태 $ \ket{j} $를 거의 endian 형식으로 인코딩하는 $-# 컨트롤 레지스터를 $n 합니다.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $V _j $가 작동 하는 일반적인 stbit 레지스터입니다.
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: bd248ece9d76729a33db3dfead177fa68909f438
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73223499"
