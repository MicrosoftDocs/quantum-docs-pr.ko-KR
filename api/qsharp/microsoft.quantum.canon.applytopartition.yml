### YamlMime:QSharpType
uid: microsoft.quantum.canon.applytopartition
name: ApplyToPartition
type: operation
namespace: microsoft.quantum.canon
summary: 지정 된 레지스터 파티션에 작업 쌍을 두 부분으로 적용 합니다.
syntax: 'operation ApplyToPartition (op : ((Qubit[], Qubit[]) => Unit), numberOfQubitsToFirstArgument : Int, target : Qubit[]) : Unit'
input:
  content: '(op : ((Qubit[], Qubit[]) => Unit), numberOfQubitsToFirstArgument : Int, target : Qubit[])'
  types:
  - name: op
    summary: 지정 된 파티션에 적용할 작업 쌍입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: numberOfQubitsToFirstArgument
    summary: >-
      파티션의 첫 번째 부분에 배치할 대상의 요소 수입니다.

      나머지는 파티션의 두 번째 부분을 구성 합니다.
    isPrimitive: true
    uid: Int
  - name: target
    summary: 지정 된 두 작업을 통해 분할 되 고 작동 하는 나머지 비트의 레지스터입니다.
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- microsoft.quantum.canon.applytopartitiona
- microsoft.quantum.canon.applytopartitionc
- microsoft.quantum.canon.applytopartitionca
metadata:
  ms.openlocfilehash: 2d9e410ca4cf94a2326c3cce6ae9ccc73a0c3cd8
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89357360"
