### YamlMime:QSharpType
uid: microsoft.quantum.canon.applytoeacha
name: ApplyToEachA
type: operation
namespace: microsoft.quantum.canon
summary: >-
  레지스터의 각 요소에 단일 수준 비트 작업을 적용 합니다.

  한정자는 `A` 단일의 비트 연산이 adjointable을 나타냅니다.
examples: >-
  3-이상 비트 $ \ket{+} $ 상태 준비:


  ```qsharp

  using (register = Qubit[3]) {
      ApplyToEach(H, register);
  }

  ```
syntax: "operation ApplyToEachA (singleElementOperation : ('T => Unit is Adj), register : 'T[]) : Unit"
input:
  content: "(singleElementOperation : ('T => Unit is Adj), register : 'T[])"
  types:
  - name: singleElementOperation
    summary: 각 고 비트에 적용할 연산입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
  - name: register
    summary: 지정 된 작업을 적용할 대상 비트의 배열입니다.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 작업이 수행 되는 대상입니다.
functors:
- Adjoint
seeAlso:
- microsoft.quantum.canon.applytoeach
metadata:
  ms.openlocfilehash: 3cc032af56c5a3e369677ae3b1f1ba402894f6eb
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91468878"
