### YamlMime:QSharpType
uid: microsoft.quantum.diagnostics.assertqubitisinstatewithintolerance
name: AssertQubitIsInStateWithinTolerance
type: operation
namespace: Microsoft.Quantum.Diagnostics
summary: >-
  예상 상태에서의 비트를 어설션 합니다.


  `expected`는 복합 벡터, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $를 나타냅니다.

  $A $, $b $를 나타내는 튜플의 첫 번째 요소는 복소수의 실수부 이며 두 번째 요소는 허수 부분입니다.

  마지막 인수는 어설션이 만들어지는 허용 오차를 정의 합니다.
remarks: >-
  다음 Mathematica 코드를 사용 하 여 mi, mx, my, mz에 대 한 식을 확인할 수 있습니다.


  ```mathematica

  {Id, X, Y, Z} = Table[PauliMatrix[k], {k, 0, 3}];

  st = {{ reA + I imA }, { reB + I imB} };

  M = st . ConjugateTranspose[st];

  mx = Tr[M.X] // ComplexExpand;

  my = Tr[M.Y] // ComplexExpand;

  mz = Tr[M.Z] // ComplexExpand;

  mi = Tr[M.Id] // ComplexExpand;

  2 m == Id mi + X mx + Z mz + Y my // ComplexExpand // Simplify

  ```


  허용 오차는 $ \langle\psi | \psi\rangle = x\_1 I + x\_2 X + x\_3 Y + x\_4 Z $ 및 real vector (Y ₂)로 정의 된 3 차원 실제 벡터 (x ₂, x ₃, x ₄) 사이의 $L\_{\infty} $ 거리입니다. , y ₃, y ₄)에 의해 정의 된 ρ = y ₁ I + y ₂ X + y ₃ Y + y ₄ Z 여기서 ρ는 레지스터의 상태에 해당 하는 밀도 행렬입니다.

  이는 Tr (ρ) 및 Tr (| ψ ⟩ ⟨ ψ |)이 모두 1 (예: x ₁ = 1/2, y ₁ = 1/2) 이라는 가정 하에만 적용 됩니다.

  그렇지 않은 경우 함수는 l ∞ distance between (x ₂-x ₁, x ₃-x ₁, x ₄-x ₁, x ₄ + x ₁) 및 (y ₂-y ₁, y ₃-y ₁ ₄, y ₁ + y ₄)이 허용 오차 매개 변수 보다 작음을 어설션 합니다.
examples: >-
  ```Q#

  using (qubits = Qubit[2]) {
      // Both qubits are initialized as |0〉: a=(1 + 0*i), b=(0 + 0*i)
      AssertQubitIsInStateWithinTolerance((Complex(1., 0.), Complex(0., 0.)), qubits[0], 1e-5);
      AssertQubitIsInStateWithinTolerance((Complex(1., 0.), Complex(0., 0.)), qubits[1], 1e-5);
      Y(qubits[1]);
      // Y |0〉 = i |1〉: a=(0 + 0*i), b=(0 + 1*i)
      AssertQubitIsInStateWithinTolerance((Complex(0., 0.), Complex(0., 1.)), qubits[1], 1e-5);
  }

  ```
syntax: 'operation AssertQubitIsInStateWithinTolerance (expected : (Microsoft.Quantum.Math.Complex, Microsoft.Quantum.Math.Complex), register : Qubit, tolerance : Double) : Unit'
input:
  content: '(expected : (Microsoft.Quantum.Math.Complex, Microsoft.Quantum.Math.Complex), register : Qubit, tolerance : Double)'
  types:
  - name: expected
    summary: 각각 $ \ket{0}$ 및 $ \ket{1}$에 대 한 복잡 한 amplitudes이 필요 합니다.
    types:
    - uid: microsoft.quantum.math.complex
    - uid: microsoft.quantum.math.complex
  - name: register
    summary: 상태를 어설션할의 비트입니다. 이 원하는 비트는 할당 되지 않은 다른 것으로 간주 되는 것으로 간주 됩니다.
    isPrimitive: true
    uid: Qubit
  - name: tolerance
    summary: >-
      실제 amplitudes이 예상 대로 벗어날 수 있는 추가 허용 오차입니다.

      자세한 내용은 아래 설명 부분을 참조 하세요.
    isPrimitive: true
    uid: Double
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
ms.openlocfilehash: 8b43bac19173c5ae5a11ff6879a03209c32e7c76
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 10/31/2019
ms.locfileid: "73227120"
