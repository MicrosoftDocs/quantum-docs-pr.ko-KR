### YamlMime:QSharpType
uid: microsoft.quantum.arrays.filtered
name: Filtered
type: function
namespace: Microsoft.Quantum.Arrays
summary: 배열의 요소에 대해 정의 된 배열과 조건자가 지정 된 경우 조건자를 충족 하는 요소로 구성 된 배열을 반환 합니다.
remarks: 함수는 제네릭 형식에 대해 정의 됩니다. 즉, 배열을 `'T[]` 하 고 조건자 `'T -> Bool` 하 여 요소를 필터링 할 수 있습니다.
examples: >-
  다음 코드에서는 "필터링 된" 함수를 보여 줍니다.

  조건자는 @"microsoft.quantum.logical.greaterthani" 함수를 사용 하 여 정의 됩니다.


  ```qsharp

  open Microsoft.Quantum.Arrays;

  open Microsoft.Quantum.Logical;


  function FilteredDemo() : Unit {
     let predicate = GreaterThanI(_, 5);
     let filteredArray = Filtered(predicate, [2, 5, 9, 1, 8]);
     Message($"{filteredArray}");
  }

  ```


  이 예제에서 짐작할 수 있는 결과는 5 보다 큰 숫자의 배열이 됩니다.
syntax: "function Filtered (predicate : ('T -> Bool), array : 'T[]) : 'T[]"
input:
  content: "(predicate : ('T -> Bool), array : 'T[])"
  types:
  - name: predicate
    summary: "`'T`에서 요소를 필터링 하는 데 사용 되는 부울로의 함수입니다."
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
  - name: array
    summary: "`'T`에 대 한 요소의 배열입니다."
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[]"
  types:
  - summary: 조건자를 충족 하는 요소의 배열 `'T[]`입니다.
    isArray: true
    uid: "'T"
    isLocal: true
typeParameters:
- uid: "'T"
  summary: '`array` 요소의 형식입니다.'
metadata:
  ms.openlocfilehash: 8ce7f84c2243a5194b5a2223884fb68304767dbf
  ms.sourcegitcommit: a0e50c5f07841b99204c068cf5b5ec8ed087ffea
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 03/26/2020
  ms.locfileid: "80320740"
