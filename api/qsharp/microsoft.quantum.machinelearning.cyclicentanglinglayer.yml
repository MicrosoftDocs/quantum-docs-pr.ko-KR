### YamlMime:QSharpType
uid: microsoft.quantum.machinelearning.cyclicentanglinglayer
name: CyclicEntanglingLayer
type: function
namespace: microsoft.quantum.machinelearning
summary: 지정 된 축을 따라 단일 제어 회전의 배열을 반환 하 고,이를 통해 주기적의 레지스터를 정렬 하 고, 고유 모델 매개 변수에 의해 매개 변수화 됩니다.
examples: >-
  다음은 동일 합니다.


  ```Q#

  let layer = CyclicEntanglingLayer(3, PauliX, 2);

  let layer = [
      ControlledRotation((0, [2]), PauliX, 0),
      ControlledRotation((1, [0]), PauliX, 1),
      ControlledRotation((2, [1]), PauliX, 2)
  ];

  ```
syntax: 'function CyclicEntanglingLayer (nQubits : Int, axis : Pauli, stride : Int) : Microsoft.Quantum.MachineLearning.ControlledRotation[]'
input:
  content: '(nQubits : Int, axis : Pauli, stride : Int)'
  types:
  - name: nQubits
    summary: 지정 된 계층에 의해 처리 되는의 비트 수입니다.
    isPrimitive: true
    uid: Int
  - name: axis
    summary: 지정 된 계층의 각 회전에 대 한 회전 축입니다.
    isPrimitive: true
    uid: Pauli
  - name: stride
    summary: 각 회전에 대해 대상과 컨트롤 인덱스를 분리 하는 것입니다.
    isPrimitive: true
    uid: Int
output:
  content: Microsoft.Quantum.MachineLearning.ControlledRotation[]
  types:
  - summary: 주기적의 레지스터를 중심으로 하는 두 개의 고 비트 제어 되는 회전의 배열입니다 `nQubits` .
    isArray: true
    uid: microsoft.quantum.machinelearning.controlledrotation
metadata:
  ms.openlocfilehash: daac61ccccadbe16910c6487549cd6ce524d3b58
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89344848"
