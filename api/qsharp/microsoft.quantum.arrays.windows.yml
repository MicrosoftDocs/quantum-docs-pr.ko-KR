### YamlMime:QSharpType
uid: microsoft.quantum.arrays.windows
name: Windows
type: function
namespace: microsoft.quantum.arrays
summary: >-
  길이의 연속 subarrays 모두 반환 합니다 `size` .


  이 함수는의 길이에 대 한 모든 `n - size + 1` subarrays을 순서 대로 반환 합니다 `size` `n` . 여기서은의 길이입니다 `arr` .

  첫 번째 subarrays는 `arr[0..size - 1], arr[1..size], arr[2..size + 1]` 마지막 하위 배열까지 `arr[n - size..n - 1]` 입니다.


  또는 인 경우 `size <= 0` `size > n` 빈 배열이 반환 됩니다.
examples: >-
  ```Q#

  // same as [[1, 2, 3], [2, 3, 4], [3, 4, 5]]

  let windows = Windows(3, [1, 2, 3, 4, 5]);

  ```
syntax: "function Windows (size : Int, array : 'T[]) : 'T[][]"
input:
  content: "(size : Int, array : 'T[])"
  types:
  - name: size
    summary: Subarrays의 길이입니다.
    isPrimitive: true
    uid: Int
  - name: array
    summary: 요소의 배열입니다.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'T[][]"
  types:
  - isArray: true
    types:
    - isArray: true
      uid: "'T"
      isLocal: true
typeParameters:
- uid: "'T"
  summary: '`array`요소의 형식입니다.'
metadata:
  ms.openlocfilehash: 5b16c24f608e8df853f8bdf141b45ab8cd4b3469
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494066"
