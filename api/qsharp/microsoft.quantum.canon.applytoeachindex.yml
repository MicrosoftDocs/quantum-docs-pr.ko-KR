### YamlMime:QSharpType
uid: microsoft.quantum.canon.applytoeachindex
name: ApplyToEachIndex
type: operation
namespace: microsoft.quantum.canon
summary: 레지스터의 인덱싱된 각 요소에 단일 수준 비트 작업을 적용 합니다.
syntax: "operation ApplyToEachIndex (singleElementOperation : ((Int, 'T) => Unit), register : 'T[]) : Unit"
input:
  content: "(singleElementOperation : ((Int, 'T) => Unit), register : 'T[])"
  types:
  - name: singleElementOperation
    summary: 각 고 비트에 적용할 연산입니다.
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: register
    summary: 지정 된 작업을 적용할 대상 비트의 배열입니다.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 각 작업의 역할을 하는 대상입니다.
seeAlso:
- microsoft.quantum.canon.applytoeach
- microsoft.quantum.canon.applytoeachindexa
- microsoft.quantum.canon.applytoeachindexc
- microsoft.quantum.canon.applytoeachindexca
metadata:
  ms.openlocfilehash: e358052c38672a29c725acb42650914693a153ad
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91468858"
