### YamlMime:QSharpNamespace
uid: microsoft.quantum.arithmetic
name: Microsoft.Quantum.Arithmetic
summary: " # <a name=\"summary\"></a>요약\n 이 네임 스페이스는 coherently 컴퓨팅 산술 연산에 사용 되는 함수 및 작업을 포함 합니다."
functions:
- uid: microsoft.quantum.arithmetic.bigendianaslittleendian
  summary: '`BigEndian` 에서의 비트 순서를 반대로 하 `LittleEndian` 여이를 지정 합니다.'
- uid: microsoft.quantum.arithmetic.identicalformatfactfxp
  summary: 제공 된 배열의 모든 고정 소수점 숫자가 동일한 점 위치와 고 비트 숫자를 갖도록 어설션 합니다.
- uid: microsoft.quantum.arithmetic.identicalpointposfactfxp
  summary: 제공 된 배열의 모든 고정 소수점 숫자가 최하위 비트에서 계산 될 때 동일한 점 위치를 갖도록 어설션 합니다. 즉, 비트 수 빼기 point position은 배열의 모든 고정 소수점 숫자에 대해 상수 여야 합니다.
- uid: microsoft.quantum.arithmetic.littleendianasbigendian
  summary: '`LittleEndian` 에서의 비트 순서를 반대로 하 `BigEndian` 여이를 지정 합니다.'
- uid: microsoft.quantum.arithmetic.reversedopbe
  summary: 빅 endian 입력을 사용 하는 작업의 경우는 작은 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedopbea
  summary: 빅 endian 입력을 사용 하는 작업의 경우는 작은 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedopbec
  summary: 빅 endian 입력을 사용 하는 작업의 경우는 작은 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedopbeca
  summary: 빅 endian 입력을 사용 하는 작업의 경우는 작은 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedople
  summary: 는 작은 endian 입력을 사용 하는 작업에 대해 빅 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedoplea
  summary: 는 작은 endian 입력을 사용 하는 작업에 대해 빅 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedoplec
  summary: 는 작은 endian 입력을 사용 하는 작업에 대해 빅 endian 입력을 사용 하는 새 작업을 반환 합니다.
- uid: microsoft.quantum.arithmetic.reversedopleca
  summary: 는 작은 endian 입력을 사용 하는 작업에 대해 빅 endian 입력을 사용 하는 새 작업을 반환 합니다.
operations:
- uid: microsoft.quantum.arithmetic.addconstantfxp
  summary: 퀀텀 고정 소수점 숫자에 기존 상수를 추가 합니다.
- uid: microsoft.quantum.arithmetic.addfxp
  summary: 퀀텀 레지스터에 저장 된 두 개의 고정 소수점 숫자를 추가 합니다.
- uid: microsoft.quantum.arithmetic.addi
  summary: 는의 레지스터 크기에 따라의 `ys`추가 및 포함 없이 추가를 자동으로 선택 합니다.
- uid: microsoft.quantum.arithmetic.applyleoperationonphasele
  summary: 형식의 <xref:microsoft.quantum.arithmetic.littleendian>대상 레지스터에서 등록을 <xref:microsoft.quantum.arithmetic.phaselittleendian> 입력으로 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyleoperationonphaselea
  summary: 형식의 <xref:microsoft.quantum.arithmetic.littleendian>대상 레지스터에서 등록을 <xref:microsoft.quantum.arithmetic.phaselittleendian> 입력으로 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyleoperationonphaselec
  summary: 형식의 <xref:microsoft.quantum.arithmetic.littleendian>대상 레지스터에서 등록을 <xref:microsoft.quantum.arithmetic.phaselittleendian> 입력으로 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyleoperationonphaseleca
  summary: 형식의 <xref:microsoft.quantum.arithmetic.littleendian>대상 레지스터에서 등록을 <xref:microsoft.quantum.arithmetic.phaselittleendian> 입력으로 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applymajorityinplace
  summary: 은 (는) 다양 한 비트의 레지스터에 세 가지 주요 비트 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonle
  summary: 형식의 <xref:microsoft.quantum.arithmetic.phaselittleendian>대상 레지스터에서 등록을 <xref:microsoft.quantum.arithmetic.littleendian> 입력으로 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonlea
  summary: ''
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonlec
  summary: ''
- uid: microsoft.quantum.arithmetic.applyphaseleoperationonleca
  summary: ''
- uid: microsoft.quantum.arithmetic.applyreversedopbe
  summary: 빅 endian 입력을 사용 하는 작업을 작은 endian 형식을 사용 하 여 부호 없는 정수로 등록 인코딩에 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedopbea
  summary: 빅 endian 입력을 사용 하는 작업을 작은 endian 형식을 사용 하 여 부호 없는 정수로 등록 인코딩에 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedopbec
  summary: 빅 endian 입력을 사용 하는 작업을 작은 endian 형식을 사용 하 여 부호 없는 정수로 등록 인코딩에 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedopbeca
  summary: 빅 endian 입력을 사용 하는 작업을 작은 endian 형식을 사용 하 여 부호 없는 정수로 등록 인코딩에 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedople
  summary: 빅 endian 형식을 사용 하 여 부호 없는 정수를 레지스터 인코딩에 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedoplea
  summary: 빅 endian 형식을 사용 하 여 부호 없는 정수를 레지스터 인코딩에 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedoplec
  summary: 빅 endian 형식을 사용 하 여 부호 없는 정수를 레지스터 인코딩에 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyreversedopleca
  summary: 빅 endian 형식을 사용 하 여 부호 없는 정수를 레지스터 인코딩에 사용 하는 작업을 적용 합니다.
- uid: microsoft.quantum.arithmetic.applyxorinplace
  summary: 는 고전적인 정수와, 비트의 레지스터가 나타내는 정수 사이에 비트 XOR 연산을 적용 합니다.
- uid: microsoft.quantum.arithmetic.assertallzerofxp
  summary: 퀀텀 고정 소수점 숫자가 0으로 초기화 됨을 어설션 하는 도우미 함수입니다. 즉, 모든 요소는 $ \ket{0}$ 상태에 있습니다.
- uid: microsoft.quantum.arithmetic.assertmostsignificantbit
  summary: 부호 없는 정수를 나타내는 고 비트 레지스터의 가장 중요 한 것이 특정 상태에 있음을 어설션 합니다.
- uid: microsoft.quantum.arithmetic.assertphaselessthan
  summary: PhaseLittleEndian에서 `number` 인코딩된가 보다 `value`작음을 어설션 합니다.
- uid: microsoft.quantum.arithmetic.assertprobint
  summary: 퀀텀 레지스터의 특정 상태에 대 한 확률이 예상 값을 가지는 것을 어설션 합니다.
- uid: microsoft.quantum.arithmetic.carry
  summary: 해독 가능한 전달 게이트를 구현 합니다. 에서로 인코딩된 `carryIn` 전달 비트와 및 `summand1` `summand2`에서 인코딩된 두 개의 summand 비트가 지정 된 경우,는의 `carryIn` `summand1` `summand2` 비트 xor를 계산 하 `summand2` 고,는이 비트의 비트 xor를 계산 합니다. `carryOut`
- uid: microsoft.quantum.arithmetic.cascadeccnot
  summary: >-
    레지스터 중 하나에 대 한 다음의 비트에서 작동 하는 두 개의 두 비트 레지스터의 해당 비트에서 제어 되는 CCNOT 게이트의 cascade를 구현 합니다.

    두 레지스터의 위치 0에 있는 이상에서 시작 하 여, CCNOT은 대상 레지스터의 위치 1에 있는 나머지 비트에 적용 되 고, `Length(nQubits)-1`대상 레지스터의 위치 2에 있는 두 번째 위치에 있는 두 번째 위치에 있는 나머지 비트에 의해 제어 됩니다.
- uid: microsoft.quantum.arithmetic.comparegreaterthanfxp
  summary: 퀀텀 레지스터에 저장 된 두 개의 고정 소수점 숫자를 비교 하 고 결과에서 대칭 이동을 제어 합니다.
- uid: microsoft.quantum.arithmetic.comparegti
  summary: 정수 비교 `result = x > y`를 위한 래퍼입니다.
- uid: microsoft.quantum.arithmetic.comparegtsi
  summary: 부호 있는 정수 비교 `result = xs > ys`를 위한 래퍼입니다.
- uid: microsoft.quantum.arithmetic.compareusingripplecarry
  summary: 이 연산은 값의 XOR를 출력의 비트에 적용 하 여, 값의 레지스터가 나타내는 정수가 다른 정수 보다 큰지 테스트 합니다.
- uid: microsoft.quantum.arithmetic.computereciprocalfxp
  summary: 고정 소수점 숫자 $x $에 대해 $1/x $를 계산 합니다.
- uid: microsoft.quantum.arithmetic.computereciprocali
  summary: 정수 나누기를 사용 하 여 부호 없는 정수 x에 대해 역 1/x를 계산 합니다. 정수로 해석 된 결과는가 됩니다 `floor(2^(2*n-1) / x)`.
- uid: microsoft.quantum.arithmetic.copymostsignificantbit
  summary: 부호 없는 정수를 나타내는 값 비트 레지스터 `from` 의 가장 중요 한 비트를 해당 비트에 복사 `target`합니다.
- uid: microsoft.quantum.arithmetic.dividei
  summary: 두 퀀텀 정수를 나눕니다.
- uid: microsoft.quantum.arithmetic.evaluateevenpolynomialfxp
  summary: 고정 소수점 표현에서 짝수 다항식을 계산 합니다.
- uid: microsoft.quantum.arithmetic.evaluateoddpolynomialfxp
  summary: 고정 소수점 표현에서 홀수 다항식을 계산 합니다.
- uid: microsoft.quantum.arithmetic.evaluatepolynomialfxp
  summary: 고정 소수점 표현에서 다항식을 계산 합니다.
- uid: microsoft.quantum.arithmetic.greaterthan
  summary: 비교 결과에 따라 대상의 범위를 대칭 이동 하는 두 개의 정수를 해당 형식으로 인코딩된 두 정수 사이에 보다 큼 비교를 적용 합니다.
- uid: microsoft.quantum.arithmetic.incrementbyinteger
  summary: 단계 회전을 사용 하 여, 부호 없는 퀀텀 레지스터를 고전 정수로 늘립니다.
- uid: microsoft.quantum.arithmetic.incrementbymodularinteger
  summary: 정수 상수를 기준으로 하는 이상 비트 레지스터의 모듈식 증분을 수행 합니다.
- uid: microsoft.quantum.arithmetic.incrementphasebyinteger
  summary: 단계 회전을 사용 하 여, 부호 없는 퀀텀 레지스터를 고전 정수로 늘립니다.
- uid: microsoft.quantum.arithmetic.incrementphasebymodularinteger
  summary: 정수 상수를 기준으로 하는 이상 비트 레지스터의 모듈식 증분을 수행 합니다.
- uid: microsoft.quantum.arithmetic.invert2ssi
  summary: 지정 된 정수 모듈로 2의 보수를 반전 합니다.
- uid: microsoft.quantum.arithmetic.maj
  summary: 이는 내부 과반수 작업을 3 개의 비트에 적용 합니다.
- uid: microsoft.quantum.arithmetic.measurefxp
  summary: 고정 소수점 숫자를 측정 하 고, 값을 Double로 반환 하 고, 모든 레지스터를 0으로 다시 설정 합니다.
- uid: microsoft.quantum.arithmetic.measureinteger
  summary: 퀀텀 레지스터의 콘텐츠를 측정 하 고 정수로 변환 합니다. 측정은 표준 계산 기준, 즉의 `PauliZ`eigenbasis을 기준으로 수행 됩니다.
- uid: microsoft.quantum.arithmetic.multiplyandaddbymodularinteger
  summary: 은 (는) 정수 계열 레지스터에서 모듈식 곱하기 및 추가 정수 상수를 수행 합니다.
- uid: microsoft.quantum.arithmetic.multiplyandaddphasebymodularinteger
  summary: MultiplyAndAddByModularInteger와 동일 하지만 summand가 QFT로 정수를 인코딩하는 것으로 가정 합니다.
- uid: microsoft.quantum.arithmetic.multiplybymodularinteger
  summary: 이상 비트 레지스터에서 정수 상수로 모듈식 곱하기를 수행 합니다.
- uid: microsoft.quantum.arithmetic.multiplyfxp
  summary: 퀀텀 레지스터의 두 고정 소수점 숫자를 곱합니다.
- uid: microsoft.quantum.arithmetic.multiplyi
  summary: '`xs` 정수를 정수로 `ys` 곱하고 처음에 0 이어야 하 `result`는에 결과를 저장 합니다.'
- uid: microsoft.quantum.arithmetic.multiplysi
  summary: '`xs` 부호 있는 정수를 부호 `ys` 있는 정수로 곱하고 처음에 0 이어야 하는에 `result`결과를 저장 합니다.'
- uid: microsoft.quantum.arithmetic.preparefxp
  summary: 퀀텀 고정 소수점 수를 기존 상수로 초기화 합니다.
- uid: microsoft.quantum.arithmetic.reflectaboutinteger
  summary: 지정 된 기존 정수에 대 한 퀀텀 레지스터를 반영 합니다.
- uid: microsoft.quantum.arithmetic.ripplecarryaddercdkm
  summary: 해독 가능한 내부 ripple-두 개의 정수를 추가 합니다.
- uid: microsoft.quantum.arithmetic.ripplecarryadderd
  summary: >-
    해독 가능한 내부 ripple-두 개의 정수를 추가 합니다.

    LittleEndian 레지스터 `xs` 및 `ys`에서 인코딩된 두 개의 $n $ bit 정수를 제공 하 고,이 작업은 두 정수의 합계를 계산 하며,이는 결과의 $n $ 최하위 비트를 유지 하 `ys` 고, 운반 비트를 xored 하는 것입니다. `carry`
- uid: microsoft.quantum.arithmetic.ripplecarryaddernocarryttk
  summary: 해독 가능, 내부 ripple-수행 하지 않고 두 개의 정수를 추가 합니다.
- uid: microsoft.quantum.arithmetic.ripplecarryadderttk
  summary: >-
    해독 가능한 내부 ripple-두 개의 정수를 추가 합니다.

    LittleEndian 레지스터 `xs` 및 `ys`에서 인코딩된 두 개의 $n $ bit 정수를 제공 하 고,이 작업은 두 정수의 합계를 계산 하며,이는 결과의 $n $ 최하위 비트를 유지 하 `ys` 고, 운반 비트를 xored 하는 것입니다. `carry`
- uid: microsoft.quantum.arithmetic.squarefxp
  summary: 고정 소수점 수를 제곱 합니다.
- uid: microsoft.quantum.arithmetic.squarei
  summary: '`result`에서 정수의 `xs` 제곱을 계산 하 여 처음에 0 이어야 합니다.'
- uid: microsoft.quantum.arithmetic.squaresi
  summary: 부호 있는 사각형 `xs` 의 정수 이며 처음에 `result`0 이어야 하는에 결과를 저장 합니다.
- uid: microsoft.quantum.arithmetic.sum
  summary: 해독 가능한 sum gate를 구현 합니다. `carryIn` 에서로 인코딩된 전달 비트와 및 `summand1` `summand2`에서 인코딩된 두 개의 summand 비트가 지정 된 경우는의 `carryIn` `summand1` `summand2` 비트 xor를 계산 합니다. `summand2`
newtypes:
- uid: microsoft.quantum.arithmetic.bigendian
  summary: 부호 없는 정수를 빅 endian 순서로 인코딩하는 레지스터입니다. 인덱스 `0` 를 사용 하는가 중 비트는 부호 없는 정수의 상위 비트를 인코딩합니다.
- uid: microsoft.quantum.arithmetic.fixedpoint
  summary: 고정 소수점 수에 해당 하는 비트의 레지스터를 나타냅니다. 는 이진 점의 왼쪽에 있는 값과 같은 정수 (즉, 1 보다 크거나 같은 가중치 비트)와 퀀텀 레지스터로 구성 됩니다.
- uid: microsoft.quantum.arithmetic.littleendian
  summary: 부호 없는 정수를 거의 endian 순서로 인코딩하는 레지스터입니다. 인덱스가 `0` 있는 이상 비트는 부호 없는 정수의 최하위 비트를 인코딩합니다.
- uid: microsoft.quantum.arithmetic.phaselittleendian
  summary: >-
    QFT 기반의 작은 endian 부호 없는 정수입니다.


    예를 들어 $ \ket{x} $가 계산을 기준으로 하는 정수 $x $의 작은 endian 인코딩이 면 $ \operatorname{QFTLE} \ket{x} $는 QFT의 $x $의 인코딩입니다.
- uid: microsoft.quantum.arithmetic.signedlittleendian
  summary: Little endian에 저장 된 부호 있는 정수 형식입니다 (LittleEndian 참조).
metadata:
  ms.openlocfilehash: eda1d6d9037caecd7a2f0d91acdc0e59d34efe41
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82675486"
