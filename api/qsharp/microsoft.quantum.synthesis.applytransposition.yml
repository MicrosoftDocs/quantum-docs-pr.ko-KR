### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applytransposition
name: ApplyTransposition
type: operation
namespace: microsoft.quantum.synthesis
summary: 이 작업을 수행 하면 `a` `b` 길이가 $n $ 인 지정 된 상태 vector의 인덱스에 있는 진폭을 인덱스에 있는 진폭으로 바꿉니다 `register` .  `a`가와 같으면 `b` 상태 벡터는 변경 되지 않습니다.
examples: >-
  Superposition의 숫자 상태 $ | 1 \ rangle $, $ | 2 \ rangle $ 및 $ | 3 \ rangle $ on 2를 준비 합니다.


  ```Q#

  using (qubits = Qubit[2]) {
    let register = LittleEndian(qubits);
    PrepareUniformSuperposition(3, register);
    ApplyTransposition(0, 3, register);
  }

  ```
syntax: 'operation ApplyTransposition (a : Int, b : Int, qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(a : Int, b : Int, qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: a
    summary: 첫 번째 인덱스 (0에서 $2 ^ n-$1 사이의 값 이어야 함)
    isPrimitive: true
    uid: Int
  - name: b
    summary: 두 번째 인덱스 (0에서 $2 ^ n-$1 사이의 값 이어야 함)
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: Transposition이 적용 되는 $ $n의 목록입니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: caffae137e4e1fa23ef087c4fbb30179a43dd8c0
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89327993"
