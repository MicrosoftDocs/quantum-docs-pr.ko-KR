### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.amplitudeamplificationfrompartialreflections
name: AmplitudeAmplificationFromPartialReflections
type: function
namespace: microsoft.quantum.amplitudeamplification
summary: 부분 반사에의 한 진폭 증폭입니다.
remarks: >-
  진폭 증폭은 명확한 진폭 증폭의 특수 한 경우 이며,이 경우 시스템의 비트가 없으며 명확한 oracle이 identity로 설정 됩니다.

  대부분의 경우 `startQubits` 는 $ \ket{\text{start}} \_ $1의 $-$1 eigenstate에서 초기화 됩니다 `startStateReflection` .
syntax: 'function AmplitudeAmplificationFromPartialReflections (phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, startStateReflection : Microsoft.Quantum.Oracles.ReflectionOracle, targetStateReflection : Microsoft.Quantum.Oracles.ReflectionOracle) : (Qubit[] => Unit is Adj + Ctl)'
input:
  content: '(phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, startStateReflection : Microsoft.Quantum.Oracles.ReflectionOracle, targetStateReflection : Microsoft.Quantum.Oracles.ReflectionOracle)'
  types:
  - name: phases
    summary: 부분 반사의 단계
    uid: microsoft.quantum.amplitudeamplification.reflectionphases
  - name: startStateReflection
    summary: 시작 상태에 대 한 리플렉션 연산자
    uid: microsoft.quantum.oracles.reflectionoracle
  - name: targetStateReflection
    summary: 대상 상태에 대 한 리플렉션 연산자
    uid: microsoft.quantum.oracles.reflectionoracle
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 부분 반사로 진폭 증폭을 구현 하는 연산입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: a0ee80fdc187154986db9d7621ce5a1d448b4111
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89339646"
