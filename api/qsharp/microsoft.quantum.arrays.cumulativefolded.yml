### YamlMime:QSharpType
uid: microsoft.quantum.arrays.cumulativefolded
name: CumulativeFolded
type: function
namespace: microsoft.quantum.arrays
summary: >-
  매핑된 및 접기를 단일 함수로 결합 합니다.


  이 함수는 초기 상태 `fn` 에서 시작 하 여 배열을 통해 함수를 반복 하 `state` 고 초기 상태를 포함 하지 않고 모든 중간 값을 반환 합니다.
examples: >-
  ```Q#

  // same as sums = [1, 3, 6, 10, 15]

  let sums = CumulativeFolded(PlusI, 0, SequenceI(1, 5));

  ```
syntax: "function CumulativeFolded (fn : (('State, 'T) -> 'State), state : 'State, array : 'T[]) : 'State[]"
input:
  content: "(fn : (('State, 'T) -> 'State), state : 'State, array : 'T[])"
  types:
  - name: fn
    summary: 배열에 대해 접힌 함수
    isFunction: true
    input:
      types:
      - uid: "'State"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - uid: "'State"
        isLocal: true
  - name: state
    summary: 접은 초기 상태
    uid: "'State"
    isLocal: true
  - name: array
    summary: 접기 될 값의 배열입니다.
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: "'State[]"
  types:
  - summary: >-
      최종 상태를 포함 하지만 초기 상태를 포함 하지 않는 모든 중간 상태입니다.

      출력 배열의 길이가와 같은 길이입니다 `array` .
    isArray: true
    uid: "'State"
    isLocal: true
typeParameters:
- uid: "'State"
  summary: 함수가 작동 하는 상태 유형 (예:)은 `fn` 첫 번째 입력으로 수락 하 고를 반환 합니다.
- uid: "'T"
  summary: '`array`요소의 형식입니다.'
metadata:
  ms.openlocfilehash: 02779107bd5556a7f94e8a9ae2798cef98675221
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494304"
