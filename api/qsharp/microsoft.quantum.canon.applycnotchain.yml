### YamlMime:QSharpType
uid: microsoft.quantum.canon.applycnotchain
name: ApplyCNOTChain
type: operation
namespace: microsoft.quantum.canon
summary: >-
  내부에서의 레지스터 패리티를 계산 합니다.


  이 작업을 수행 하면 해당 입력의 상태가 $ $ \begin{align} \ket{q_0} \ket{q_1} \cdots} q_ {n-1}} & \maps\ket{q_0} \ket{q_0 \cdots} \ket{q_1 \cdots q_0 \cdots q_1} \cdots q_2 \cdots \co\o {n-1}}로 변환 됩니다.

  \end{align} $ $
syntax: 'operation ApplyCNOTChain (qubits : Qubit[]) : Unit'
input:
  content: '(qubits : Qubit[])'
  types:
  - name: qubits
    summary: 패리티를 계산 하 고 저장 하는 데 사용할 수 있는 비트의 배열입니다.
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 2b5e7ae0cce9b3757c82465351846b6a78fda970
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91473635"
