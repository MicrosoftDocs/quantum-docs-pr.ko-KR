### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.ampampbyoracle
name: AmpAmpByOracle
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 표준 진폭 증폭 알고리즘
remarks: 이는 \begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target} 이라고 가정할 때 `AmpAmpPhasesStandard`로 계산 된 리플렉션 단계를 선택 하 여 가져온 표준 진폭 증폭 알고리즘입니다. }\_s + \sqrt{1-| \lambda | ^ 2} \ket{0}\_f\cdots, \end{align}이 작업에서 \begin{align} \operatorname{AmpAmpByOracle}\ket{0}\_{f} \ket{0}\_s = \lambda ((2n + 1) \lambda ^{-1}(\ 람다) \ket{1}\_f\ket {\ text {target}}\_s + \cdots\ket{0}\_f \end{align} 대부분의 경우 `flagQubit` 및 `ancillaRegister`가 $ \ket{0}\_f\ket{0}상태에서 초기화 됩니다 @no__ t_25_ a $.
syntax: 'function AmpAmpByOracle (nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
references: '- [*G. Brtis, Hoyer, M. Mosca, .Ttapp*](https://arxiv.org/abs/quant-ph/0005055)'
input:
  content: '(nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: nIterations
    summary: 진폭 증폭의 $ $n 반복 횟수
    isPrimitive: true
    uid: Int
  - name: stateOracle
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: 플래그에 대 한 인덱스입니다.
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 표준 진폭 증폭 퀀텀 알고리즘을 구현 하는 작업입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: b55aed7c3a9381827e79c66a4a255b1515982d8d
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73215798"
