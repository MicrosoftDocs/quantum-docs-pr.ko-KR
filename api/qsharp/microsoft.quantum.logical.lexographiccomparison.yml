### YamlMime:QSharpType
uid: microsoft.quantum.logical.lexographiccomparison
name: LexographicComparison
type: function
namespace: microsoft.quantum.logical
summary: 비교 함수가 지정 된 경우 lexographically는 두 배열을 비교 하는 새 함수를 반환 합니다.
remarks: >-
  두 배열과 lexographic 비교는 `xs` `ys` 다음 절차에 따라 정의 됩니다. `x` `y` `elementComparison(x, y)` 및가 모두 true 인 경우 두 개의 요소 및가 동일 하다는 것을 알 수 `elementComparison(y, x)` 있습니다.


  - 두 배열 모두 동일 하지 않은 요소의 첫 번째 쌍까지 요소 별로 비교 됩니다. 에 따라 먼저 발생 하는 요소를 포함 하는 배열을 `elementComparison` 먼저 lexographical 정렬에서 발생 한다고 합니다.

  - Inequivalent 요소가 없고 한 배열이 다른 배열 보다 길면 짧은 배열이 먼저 발생 하는 것으로 간주 됩니다.
syntax: "function LexographicComparison (elementComparison : (('T, 'T) -> Bool)) : (('T[], 'T[]) -> Bool)"
input:
  content: "(elementComparison : (('T, 'T) -> Bool))"
  types:
  - name: elementComparison
    summary: 두 요소를 비교 하 고 `x` `y` `x` 가 보다 작거나 같은 경우을 반환 하는 함수입니다 `y` .
    isFunction: true
    input:
      types:
      - uid: "'T"
        isLocal: true
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
output:
  content: (('T[], 'T[]) -> Bool)
  types:
  - summary: 두 배열을 비교 하 고 `xs` `ys` `xs` lexographical 정렬에서 이전 또는 같은 경우을 반환 하는 함수입니다 `ys` .
    isFunction: true
    input:
      types:
      - isArray: true
        uid: "'T"
        isLocal: true
      - isArray: true
        uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Bool
typeParameters:
- uid: "'T"
  summary: 비교할 배열의 요소 형식입니다.
seeAlso:
- microsoft.quantum.arrays.sorted
metadata:
  ms.openlocfilehash: c7b1ec454d7a87c344b0297007dff32fb6ee07a6
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91494347"
