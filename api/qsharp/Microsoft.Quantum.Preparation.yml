### YamlMime:QSharpNamespace
uid: microsoft.quantum.preparation
name: Microsoft.Quantum.Preparation
summary: " # <a name=\"summary\"></a>요약\n 이 네임 스페이스에는 임의 비트를 임의 초기 상태로 준비 하기 위한 함수 및 작업이 포함 되어 있습니다."
functions:
- uid: microsoft.quantum.preparation.blochspherecoordinates
  summary: >-
    단일가 나 비트 상태에 대 한 Bloch 구 좌표를 계산 합니다.


    지정 된 두 복소수 $a 0, a1 $는 Bloch 구의 좌표를 계산 하는 구의 좌표를 계산 하는 구의 좌표를 계산 합니다. 예를 들어, $a 0 \ket {0} + a1 \ket {1} = r e ^ {it} (e ^ {-i \emlb = r e ^ {(\ 테타/2)} \ket {0} + e ^ {i \emlc\sin{(\ 테타 {1}
- uid: microsoft.quantum.preparation.quantumrom
  summary: >-
    는 퀀텀 ROM 기술을 사용 하 여 지정 된 밀도 행렬을 나타냅니다.


    $ 계수의 $ \ alpha_j $ $N 목록이 지정 된 경우,이는 \ket{j}\bra{j} 기술을 사용 하 여 밀도 행렬 $ \rho = \ p_j {j = 0} ^ {N-1} \frac{| sum_ |}의 purification에 대 한 근사치 $ \tilde\rho\ sum_ {j = 0} ^ {N-1} alpha_j $를 준비 하는 단일 $U $를 반환 합니다. {\ sum_k | \ alpha_k |} \ket{j}\bra{j} $. 이러한 근사값에서 $ \epsilon $ 오류는 $ | p_j-\frac{| alpha_j |}입니다. {\ sum_k | \ alpha_k |} | \le \le/N $ 및 $ \| \tilde\rho-\rho \| \le \te\e $를 입력 합니다. 즉, $ $ \begin{align} U\ket {0} ^ {\lceil\ log_2 N\rceil} \ k {0} ^ {m} = \ sum_ {j = 0} ^ {N-1} \sqrt{p_j} \ket{j}\ket{\text{garbage} _j}입니다.

    \end{align} $ $
- uid: microsoft.quantum.preparation.quantumromqubitcount
  summary: 에서 반환 하는 작업에 할당 해야 하는 총 작업 수를 반환 합니다 `QuantumROM` .
- uid: microsoft.quantum.preparation.statepreparationcomplexcoefficients
  summary: >-
    특정 퀀텀 상태를 준비 하는 작업을 반환 합니다.


    반환 된 작업 $U $은 $n $-\ket{0...0} $에서 t_j e ^ {i} $ 복합 _j $r 계수를 사용 하 여 임의의 퀀텀 상태 $ \ket{\psi} $을 준비 합니다.


    새로 할당 된 레지스터의 U 동작은 $ $ \begin{align} U\ket {0 ... 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}에 의해 제공 됩니다.

    \end{align} $ $
- uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
  summary: >-
    지정 된 퀀텀 상태를 준비 하는 작업을 반환 합니다.


    $ $U 반환 되는 작업은 $ \ket{0...0} $ $n $ \ alpha_j \ge $0 인 긍정 계수 $ \ket{\psi} $를 준비 합니다.


    새로 할당 된 레지스터의 U 동작은 $ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\ sum_ {j = 0} ^ {2 ^ n-1} \ alpha_j \ket{j}}{\sqrt{\ sum_ {j = 0} ^ {2 ^ n-1} | \ alpha_j | ^ 2}}에 의해 제공 됩니다.

    \end{align} $ $
operations:
- uid: microsoft.quantum.preparation.approximatelypreparearbitrarystate
  summary: 계수 집합 및 작은 endian로 인코딩된 퀀텀 레지스터가 지정 된 경우 지정 된 계수에 의해 설명 된 레지스터의 상태를 지정 된 근사값까지 준비 합니다.
- uid: microsoft.quantum.preparation.preparearbitrarystate
  summary: 계수 집합과 작은 endian 인코딩된 퀀텀 레지스터가 지정 된 경우는 지정 된 계수에 설명 된 레지스터에 상태를 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistate
  summary: 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 지정 된 참조 및 대상 레지스터로 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistatea
  summary: 지정 된 참조 및 대상 레지스터에 대해 adjoint variant를 사용 하 여 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistatec
  summary: 지정 된 참조 및 대상 레지스터에 대해 제어 된 variant를 사용 하 여 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistateca
  summary: 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 제어 된 및 adjoint 변형 둘 다 지정 된 참조 및 대상 레지스터에 준비 합니다.
- uid: microsoft.quantum.preparation.prepareentangledstate
  summary: >-
    쌍 2 비트 레지스터입니다.


    즉, 두 개의 레지스터가 지정 된 경우 {1} {2} 각 레지스터가 {00} {11} $ \ket{0\cdots 0} $ 상태에서 시작 되는 것으로 가정 하 여 각 레지스터의 각 \ket 쌍 사이에 최대 entangled 상태 $ \frac {\sqrt} \left (+ \ket \right) $를 준비 합니다.
- uid: microsoft.quantum.preparation.prepareidentity
  summary: >-
    레지스터가 지정 된 경우 최대 혼합 상태에서 등록을 준비 합니다.


    레지스터는 각 \boldone에 전체 depolarizing 채널을 적용 하 여 $/2 ^ N $ 상태에서 준비 됩니다. 여기서 $N $은 레지스터의 길이입니다.
- uid: microsoft.quantum.preparation.preparequbit
  summary: >-
    `Zero`지정 된 Pauli 연산자의 + 1 () eigenstate에서 eibit를 준비 합니다.

    Id 연산자가 지정 된 경우에는 최대 혼합 된 상태에서 해당 비트를 준비 합니다.


    이 작업은 처음에 $ \ket $ 상태에 있는 경우 {0} 이 작업을 통해 지정 된 Pauli 연산자의 $ + $1 eigenstate 또는의 최대 mixed 상태 ()에 대 한 추가 비트를 준비 `PauliI` 합니다 (참조 <xref:microsoft.quantum.preparation.preparesinglequbitidentity> ).


    이 연산은 $ \ket $ 이외의 상태에 있는 경우 {0} 다음 게이트를 적용 합니다. $H $ for `PauliX` , $HS $ for `PauliY` , $I $ for `PauliZ` 및 <xref:microsoft.quantum.preparation.preparesinglequbitidentity> `PauliI`
- uid: microsoft.quantum.preparation.preparesinglequbitidentity
  summary: >-
    최대 혼합 상태에서 고 비트를 준비 합니다.


    Depolarizing channel $ $ \begin{align} \00P (\rho) \mathrel{를 적용 하 여 $ \boldone/$2 상태에서 지정 된 비트를 준비 합니다. =} \frac {1} {4} \ sum_ {\omega \omega \{ 0, 1, 2, 3 \} } \omega \_ {\mu} \rho \omega \_ {\mu} ^ {\dagger}, \end{align} $ $ where $ \omega \_ i $는 $i $ th pauli 연산자 이며 여기서 $ \rho $는 혼합 상태를 나타내는 밀도 연산자입니다.
- uid: microsoft.quantum.preparation.prepareuniformsuperposition
  summary: >-
    0부터까지 인코딩하는 상태에 대 한 균일 한 superposition를 만듭니다 `nIndices` .


    즉,이 단일 $U $는 입력 상태가 $ \ket{0\cdots 0} $ 인 경우 $0 $에서 $1 $M까지 모든 숫자 상태에 대 한 균일 한 superposition를 만듭니다. 즉, $ $ \begin{align} U\ket {0} = \frac {1} {\sqrt{m}}\ sum_ {j = 0} ^ {M-1} \ket{j}.

    \end{align} $ $.
metadata:
  ms.openlocfilehash: 46bed785972355044c9ef9765ab957ca6d31e5f1
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89339884"
