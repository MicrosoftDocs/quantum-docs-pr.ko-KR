### YamlMime:QSharpNamespace
uid: microsoft.quantum.preparation
name: Microsoft.Quantum.Preparation
summary: " # <a name=\"summary\"></a>요약\n 이 네임 스페이스에는 임의 비트를 임의 초기 상태로 준비 하기 위한 함수 및 작업이 포함 되어 있습니다."
functions:
- uid: microsoft.quantum.preparation.blochspherecoordinates
  summary: >-
    단일가 나 비트 상태에 대 한 Bloch 구 좌표를 계산 합니다.


    지정 된 두 복소수를 나타내는 0, a1 $ $a Bloch 구의 좌표를 계산 합니다. 즉, $a 0 \ket{0} + a1 \ket{1} = r e ^ {it} (e ^ {-i \eml\ket {(\ 테타/2)} \ket{0}+ e ^ {i \emlab\sin{(\ 테타/2)}{1}) $입니다.
- uid: microsoft.quantum.preparation.quantumrom
  summary: >-
    는 퀀텀 ROM 기술을 사용 하 여 지정 된 밀도 행렬을 나타냅니다.


    $ 계수의 $ \alpha_j $ $N 목록이 지정 된 경우,이는 \tilde\rho\sum_{j 기술을 사용 하 여 밀도 행렬 $ purification = \sum_{j = 0} ^ {N-1} \rho |의 \frac{에 대 한 근사치 $ = 0} ^ {N-1} p_j\ket {j} \ bra {j} $를 준비 하는 단일 $U $를 반환 합니다. alpha_j |} {\sum_k | \alpha_k |} \ket{j}\bra{j} $. 이러한 근사값에서 $ \epsilon $ 오류는 $ | p_j-\frac{| alpha_j |}입니다. {\sum_k | \alpha_k |} | \le \le/N $ 및 $\|\tilde\rho-\rho\| \le \te\a $. 즉, $ $ \begin{align} U\ket{0}^ {\lceil\log_2 N\rceil} \ k{0}^ {m} = \sum_{j = 0} ^ {N-1} \sqrt{p_j} \ket{j}\ket{\text{garbage}_j}.

    \end{align} $ $
- uid: microsoft.quantum.preparation.quantumromqubitcount
  summary: '`QuantumROM`에서 반환 하는 작업에 할당 해야 하는 총 수를 반환 합니다.'
- uid: microsoft.quantum.preparation.statepreparationcomplexcoefficients
  summary: >-
    특정 퀀텀 상태를 준비 하는 작업을 반환 합니다.


    반환 된 작업 $U $는 $n $-stbit compute 기준 상태 $ \ket{0...0} $에서 복합 계수 $r _j t_j} $를 사용 하 여 임의의 퀀텀 상태 $ \ket{\psi} $을 준비 합니다.


    새로 할당 된 레지스터의 U 동작은 $ $ \begin{align} U\ket {0 ... 0} = \ket{\psi} = \frac{\sum_{j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\sum_{j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}에 의해 제공 됩니다.

    \end{align} $ $
- uid: microsoft.quantum.preparation.statepreparationpositivecoefficients
  summary: >-
    지정 된 퀀텀 상태를 준비 하는 작업을 반환 합니다.


    반환 된 작업 $U $는 $-\alpha_j\ge $0 $ \ket{0...0} $ $n에서 긍정 계수 $ \ket{\psi} $를 사용 하 여 $ $의 임의의 퀀텀 상태를 준비 합니다.


    새로 할당 된 레지스터의 U 동작은 $ $ \begin{align} U \ket{0\cdots 0} = \ket{\psi} = \frac{\sum_{j = 0} ^ {2 ^ n-1} \alpha_j \ket{j}}{\sqrt{\sum_{j = 0} ^ {2 ^ n-1} | \alpha_j | ^ 2}}에 의해 제공 됩니다.

    \end{align} $ $
operations:
- uid: microsoft.quantum.preparation.preparearbitrarystate
  summary: >-
    지정 된 퀀텀 상태를 준비 하는 작업을 반환 합니다.


    반환 된 작업 $U $는 $n $-stbit compute 기준 상태 $ \ket{0...0} $에서 복합 계수 $r _j t_j} $를 사용 하 여 임의의 퀀텀 상태 $ \ket{\psi} $을 준비 합니다.


    $ $ \begin{align} U\ket {0 ... 0} = \ket{\psi} = \frac{\sum_{j = 0} ^ {2 ^ n-1} r_j e ^ {i t_j} \ket{j}}{\sqrt{\sum_{j = 0} ^ {2 ^ n-1} | r_j | ^ 2}}.

    \end{align} $ $
- uid: microsoft.quantum.preparation.preparechoistate
  summary: 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 지정 된 참조 및 대상 레지스터로 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistatea
  summary: 지정 된 참조 및 대상 레지스터에 대해 adjoint variant를 사용 하 여 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistatec
  summary: 지정 된 참조 및 대상 레지스터에 대해 제어 된 variant를 사용 하 여 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 준비 합니다.
- uid: microsoft.quantum.preparation.preparechoistateca
  summary: 지정 된 작업에 대 한 Choi – Jamiłkowski 상태를 제어 된 및 adjoint 변형 둘 다 지정 된 참조 및 대상 레지스터에 준비 합니다.
- uid: microsoft.quantum.preparation.prepareentangledstate
  summary: >-
    쌍 2 비트 레지스터입니다.


    즉, 두 개의 레지스터가 지정 된 경우 각 레지스터가 $ \ket{0\에서 시작 되는 것으로 가정 하 여 각 레지스터에서 각 \ket 쌍 사이에 최대{2}{1}entststststst\\ket} \left ({00} +{11} \right) $를 준비 합니다. cdots 0} $ 상태.
- uid: microsoft.quantum.preparation.prepareidentity
  summary: >-
    레지스터가 지정 된 경우 최대 혼합 상태에서 등록을 준비 합니다.


    레지스터는 각 \boldone에 전체 depolarizing 채널을 적용 하 여 $/2 ^ N $ 상태에서 준비 됩니다. 여기서 $N $은 레지스터의 길이입니다.
- uid: microsoft.quantum.preparation.preparequbit
  summary: >-
    지정 된 Pauli 연산자의 + 1 (`Zero`) eigenstate에서 원하는 비트를 준비 합니다.

    Id 연산자가 지정 된 경우에는 최대 혼합 된 상태에서 해당 비트를 준비 합니다.


    처음에는 최대이 $ \ket{0}$ 상태에 있는 경우이 작업을 통해 지정 된 Pauli 연산자의 $ + $1 eigenstate 또는 `PauliI`의 경우 대신 혼합 상태에서이 작업을 수행 합니다 (<xref:microsoft.quantum.preparation.preparesinglequbitidentity>참조).


    이 연산은 $ \ket{0}$ 이외의 상태에 있는 경우 다음 게이트를 적용 합니다. $H $ for `PauliX`, $HS $ for `PauliY`, $I $ for `PauliZ`, <xref:microsoft.quantum.preparation.preparesinglequbitidentity>의 경우 `PauliI`.
- uid: microsoft.quantum.preparation.preparesinglequbitidentity
  summary: >-
    최대 혼합 상태에서 고 비트를 준비 합니다.


    이 메서드는 depolarizing channel $ $ \begin{align} \Omega (\rho) \mathrel{: =} \frac {4}{1}를 적용 하 여 $ \boldone/$2 상태에서 지정 된 고 비트를 준비 합니다 .이 경우에는 \{0, 1, 2, 3\}} \omega\_{\mu} \rho s\시그마\_{\mu} ^ {\ 칼}, \end{align} $ $ where $ \sigma\_i $는 $i $ th Pauli 연산자이 고, 여기서 $ \rho $은 혼합 된 상태를 나타내는 밀도 연산자입니다.
- uid: microsoft.quantum.preparation.prepareuniformsuperposition
  summary: >-
    0에서 `nIndices`를 인코딩하는 상태에 대 한 균일 한 superposition를 만듭니다.


    즉,이 단일 $U $는 입력 상태가 $ \ket{0\cdots 0} $ 인 경우 $0 $에서 $1 $M까지 모든 숫자 상태에 대 한 균일 한 superposition를 만듭니다. 즉, $ $ \begin{align} U\ket{0}= \frac{1}{\sqrt{M}}\sum_{j = 0} ^ {M-1} \ket{j}.

    \end{align} $ $.
ms.openlocfilehash: 2b9e3b89a29eb73b9b7417210628fce046c91209
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 10/31/2019
ms.locfileid: "73216019"
