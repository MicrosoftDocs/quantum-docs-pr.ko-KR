### YamlMime:QSharpType
uid: microsoft.quantum.canon.applycnotchainwithtarget
name: ApplyCNOTChainWithTarget
type: operation
namespace: microsoft.quantum.canon
summary: >-
  대상 비트의 배열에 대 한 패리티를 계산 합니다.


  배열이 처음에 $ \ket{q_0} \ket{q_1} \cdots q_ {\text{target}}} $ 상태에 있는 경우, 최종 상태는 $ \ket{q_0} \ket{q_1 \cdots q_0} \cdots \text{target}}} q_ {n-1} \cdots \co\o q_0 \cdots {$로 지정 됩니다.
remarks: >-
  다음은 동일 합니다.


  ```qsharp

  ApplyCNOTChainWithTarget(Most(qs), Last(qs));

  ```


  및


  ```qsharp

  ApplyCNOTChain(qs);

  ```
syntax: 'operation ApplyCNOTChainWithTarget (qubits : Qubit[], targetQubit : Qubit) : Unit'
input:
  content: '(qubits : Qubit[], targetQubit : Qubit)'
  types:
  - name: qubits
    summary: 패리티를 계산 하는 데 사용할 비트의 배열입니다.
    isArray: true
    isPrimitive: true
    uid: Qubit
  - name: targetQubit
    summary: "'가 중 비트 '의 패리티가 XORed 하는 마지막입니다."
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 156721c0e5f61dc9761e53d08342cbab3d815e75
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89350798"
