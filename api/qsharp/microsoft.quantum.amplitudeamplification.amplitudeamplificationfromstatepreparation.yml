### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.amplitudeamplificationfromstatepreparation
name: AmplitudeAmplificationFromStatePreparation
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 부분 반사를 위해 oracles에 의해 진폭 증폭
remarks: >-
  이는 `AmpAmpByReflectionPhases`보다 시작 및 대상 상태를 형성 하는 보다 엄격한 조건을 적용 합니다.

  대상 상태가 $ \ket{1}\_f $로 표시 되어 있다고 가정 합니다.

  \Begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target}}\_s + \sqrt{1-| \aas | ^ 2} \ket{0}\_f\cdots, \end{align}에서 `flagQubit` 및 `auxiliaryRegister`는 상태 $ \ket{0}\_{f} \ket{0}\_s $에 초기화 되어 있다고 가정 합니다.
syntax: 'function AmplitudeAmplificationFromStatePreparation (phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
input:
  content: '(phases : Microsoft.Quantum.AmplitudeAmplification.ReflectionPhases, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: phases
    summary: 부분 반사의 단계
    uid: microsoft.quantum.amplitudeamplification.reflectionphases
  - name: stateOracle
    summary: 시작 상태를 준비 하는 단일 oracle $A $
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: 플래그에 대 한 인덱스입니다.
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 부분 반사에 의해 구현 되는 oracles에 의해 진폭 증폭을 구현 하는 작업입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: b31e601e5e5564ba26bc2f5b9a66a8fecd5e3786
  ms.sourcegitcommit: ca5015fed409eaf0395a89c2e4bc6a890c360aa2
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 01/29/2020
  ms.locfileid: "76872498"
