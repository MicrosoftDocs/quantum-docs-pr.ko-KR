### YamlMime:QSharpNamespace
functions:
- summary: 에 짝수 1과-1이 있으면 1을 반환 `index` `index` 합니다.
  uid: Microsoft.Quantum.Canon.Angle
- summary: ''
  uid: Microsoft.Quantum.Canon.AnyOutsideToleranceCP
- summary: ''
  uid: Microsoft.Quantum.Canon.AnyOutsideToleranceD
- summary: 인덱스에 따라 컨트롤, 대상 및 도우미의 정렬
  uid: Microsoft.Quantum.Canon.ArrangedQubits
- summary: >+
    > [!WARNING]

    > BigEndianToLittleEndian는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian"을 사용하세요.

  uid: Microsoft.Quantum.Canon.BigEndianToLittleEndian
- summary: 단일 입력에 대해 작동 하는 작업 배열이 지정 된 경우 지정 된 각 작업을 순서 대로 수행 하는 새 작업을 생성 합니다.
  uid: Microsoft.Quantum.Canon.Bound
- summary: 단일 입력에 대해 작동 하는 작업 배열이 지정 된 경우 지정 된 각 작업을 순서 대로 수행 하는 새 작업을 생성 합니다. 한정자는 `A` 배열의 모든 작업이 adjointable을 나타냅니다.
  uid: Microsoft.Quantum.Canon.BoundA
- summary: 단일 입력에 대해 작동 하는 작업 배열이 지정 된 경우 지정 된 각 작업을 순서 대로 수행 하는 새 작업을 생성 합니다. 한정자는 `C` 배열의 모든 작업이 제어 가능 함을 나타냅니다.
  uid: Microsoft.Quantum.Canon.BoundC
- summary: 단일 입력에 대해 작동 하는 작업 배열이 지정 된 경우 지정 된 각 작업을 순서 대로 수행 하는 새 작업을 생성 합니다. 한정자는 `CA` 배열의 모든 작업이 adjointable 및 제어 가능 함을 나타냅니다.
  uid: Microsoft.Quantum.Canon.BoundCA
- summary: 작업 op가 지정 된 경우 기존 컨트롤 비트가 true 이면 op를 적용 하는 새 작업을 반환 합니다. 이면 `false` 아무 작업도 수행 되지 않습니다.
  uid: Microsoft.Quantum.Canon.CControlled
- summary: 작업 op가 지정 된 경우 기존 컨트롤 비트가 true 이면 op를 적용 하는 새 작업을 반환 합니다. 이면 `false` 아무 작업도 수행 되지 않습니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.CControlledA
- summary: 작업 op가 지정 된 경우 기존 컨트롤 비트가 true 이면 op를 적용 하는 새 작업을 반환 합니다. 이면 `false` 아무 작업도 수행 되지 않습니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.CControlledC
- summary: 작업 op가 지정 된 경우 기존 컨트롤 비트가 true 이면 op를 적용 하는 새 작업을 반환 합니다. 이면 `false` 아무 작업도 수행 되지 않습니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.CControlledCA
- summary: 두 함수의 컴퍼지션을 반환 합니다.
  uid: Microsoft.Quantum.Canon.Compose
- summary: '`inner`지정 된 입력에 대해 및의 컴퍼지션 출력을 반환 합니다 `outer` .'
  uid: Microsoft.Quantum.Canon.ComposedOutput
- summary: 외부 및 내부 연산을 지정 하면는 외부 작업에 의해 내부 작업을 변화 시키고 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.ConjugatedBy
- summary: 외부 및 내부 연산을 지정 하면는 외부 작업에 의해 내부 작업을 변화 시키고 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.ConjugatedByA
- summary: 외부 및 내부 연산을 지정 하면는 외부 작업에 의해 내부 작업을 변화 시키고 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.ConjugatedByC
- summary: 외부 및 내부 연산을 지정 하면는 외부 작업에 의해 내부 작업을 변화 시키고 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.ConjugatedByCA
- summary: 컨트롤 레지스터 상태가 지정 된 비트 마스크에 해당 하는 경우 대상 레지스터에 oracle을 적용 하는 단일 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.ControlledOnBitString
- summary: 컨트롤 레지스터 상태가 지정 된 양의 정수에 해당 하는 경우 대상 레지스터에 oracle을 적용 하는 단일 연산자를 반환 합니다.
  uid: Microsoft.Quantum.Canon.ControlledOnInt
- summary: >-
    두 입력에 대해 변환 된 작업 버전을 반환 합니다.

    즉, 두 개의 입력으로 작업을 제공 하는 경우이 함수는 isomorphism $f (x, y) \equiv f (x) (y) $를 적용 하 여 한 입력의 작업을 반환 하는 하나의 입력 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.CurriedOp
- summary: >+
    > [!WARNING]

    > DecomposeIntoTimeStepsCA는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA>를 사용하십시오.

  uid: Microsoft.Quantum.Canon.DecomposeIntoTimeStepsCA
- summary: 지정 된 작업에 대해 Trotter – Suzuki 인티그레이터를 구현 하는 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.DecomposedIntoTimeStepsCA
- summary: 지정 된 인수를 사용 하 여 지정 된 작업을 적용 하는 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.Delayed
- summary: 지정 된 인수를 사용 하 여 지정 된 작업을 적용 하는 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.DelayedA
- summary: 지정 된 인수를 사용 하 여 지정 된 작업을 적용 하는 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.DelayedC
- summary: 지정 된 인수를 사용 하 여 지정 된 작업을 적용 하는 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.DelayedCA
- summary: 단일 기능 비트를 지정 하는 경우 해당 인덱스 및 다른 모든 인덱스에서 지정 된 단일 수준 비트 연산자를 사용 하 여 다중 값 비트 Pauli 연산자를 반환 합니다 `PauliI` .
  uid: Microsoft.Quantum.Canon.EmbedPauli
- summary: 쌍이 지정 된 경우 첫 번째 요소를 반환 합니다.
  uid: Microsoft.Quantum.Canon.Fst
- summary: 회색 코드 시퀀스를 만듭니다.
  uid: Microsoft.Quantum.Canon.GrayCode
- summary: 정수 (이진 확장의 경우 1 수)의 해밍 가중치를 계산 합니다.
  uid: Microsoft.Quantum.Canon.HammingWeightI
- summary: 작업 또는 함수의 출력을 무시 합니다.
  uid: Microsoft.Quantum.Canon.Ignore
- summary: 지정 된 결과 값이와 같은지 테스트 `One` 합니다.
  uid: Microsoft.Quantum.Canon.IsResultOne
- summary: 지정 된 결과 값이와 같은지 테스트 `Zero` 합니다.
  uid: Microsoft.Quantum.Canon.IsResultZero
- summary: >+
    > [!WARNING]

    > LittleEndianToBigEndian는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.LittleEndianAsBigEndian"을 사용하세요.

  uid: Microsoft.Quantum.Canon.LittleEndianToBigEndian
- summary: 곱하기 제어 Z 회전의 구현 단계입니다.
  uid: Microsoft.Quantum.Canon.MultiplexZCoefficients
- summary: >-
    N-\ket{j} $로 제어 될 때 단일 $V _j $를 적용 하는 곱하기 제어 된 단일 $U 작업을 반환 합니다.

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexerBruteForceFromGenerator
- summary: >-
    N-\ket{j} $로 제어 될 때 단일 $V _j $를 적용 하는 곱하기 제어 된 단일 $U 작업을 반환 합니다.

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexerFromGenerator
- summary: >-
    전원에 대 한 작업을 발생 시킵니다.

    즉, $ $U $를 나타내는 작업이 지정 된 경우 power $m $에 대해 ^ m $ $U 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.OperationPow
- summary: >-
    전원에 대 한 작업을 발생 시킵니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.

    즉, $ $U $를 나타내는 작업이 지정 된 경우 power $m $에 대해 ^ m $ $U 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.OperationPowA
- summary: >-
    전원에 대 한 작업을 발생 시킵니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.

    즉, $ $U $를 나타내는 작업이 지정 된 경우 power $m $에 대해 ^ m $ $U 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.OperationPowC
- summary: >-
    전원에 대 한 작업을 발생 시킵니다. 한정자는 `A` 작업을 제어 하 고 adjointable 나타냅니다.

    즉, $ $U $를 나타내는 작업이 지정 된 경우 power $m $에 대해 ^ m $ $U 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.OperationPowCA
- summary: 작업을 레지스터의 인덱스 배열, 즉 subregister로 제한 합니다.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregister
- summary: 작업을 레지스터의 인덱스 배열, 즉 subregister로 제한 합니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterA
- summary: 작업을 레지스터의 인덱스 배열, 즉 subregister로 제한 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterC
- summary: 작업을 레지스터의 인덱스 배열, 즉 subregister로 제한 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.RestrictedToSubregisterCA
- summary: 쌍이 지정 된 경우 두 번째 요소를 반환 합니다.
  uid: Microsoft.Quantum.Canon.Snd
- summary: >+
    > [!WARNING]

    > StackCapacity는 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.StackCapacity
- summary: >+
    > [!WARNING]

    > StackLength는 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.StackLength
- summary: >+
    > [!WARNING]

    > StackNew는 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.StackNew
- summary: >+
    > [!WARNING]

    > StackPeek는 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.StackPeek
- summary: >+
    > [!WARNING]

    > StackPop은 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.StackPop
- summary: >+
    > [!WARNING]

    > StackPush는 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.StackPush
- summary: 함수 및 작업이 지정 된 경우 지정 된 함수가 입력을 변환 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.TransformedOperation
- summary: 함수 및 작업이 지정 된 경우 지정 된 함수가 입력을 변환 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.TransformedOperationA
- summary: 함수 및 작업이 지정 된 경우 지정 된 함수가 입력을 변환 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.TransformedOperationC
- summary: 함수 및 작업이 지정 된 경우 지정 된 함수가 입력을 변환 하는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.TransformedOperationCA
- summary: Trotter 시뮬레이션 알고리즘의 재귀적 구현에서 Trotter step 크기를 계산 합니다.
  uid: Microsoft.Quantum.Canon.TrotterStepSize
- summary: 작업을 반환 하는 함수가 지정 된 경우 두 입력을 튜플로 받는 새 작업을 반환 합니다.
  uid: Microsoft.Quantum.Canon.UncurriedOp
- summary: 작업을 반환 하는 함수가 지정 된 경우 두 입력을 튜플로 받는 새 작업을 반환 합니다. 한정자는 `A` 작업이 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.UncurriedOpA
- summary: 작업을 반환 하는 함수가 지정 된 경우 두 입력을 튜플로 받는 새 작업을 반환 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.UncurriedOpC
- summary: 작업을 반환 하는 함수가 지정 된 경우 두 입력을 튜플로 받는 새 작업을 반환 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.UncurriedOpCA
- summary: 지정 된 수의 값에 대 한 모든 무게 1 Pauli 연산자의 배열을 반환 합니다.
  uid: Microsoft.Quantum.Canon.WeightOnePaulis
- summary: ''
  uid: Microsoft.Quantum.Canon.WithFirstInputApplied
- summary: >+
    > [!WARNING]

    > XOR은 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Logical.Xor>를 사용하십시오.

    >

    > @"microsoft.quantum.logical.xor"을 사용하세요.

  uid: Microsoft.Quantum.Canon.XOR
name: Microsoft.Quantum.Canon
newtypes:
- summary: CCNOT gate의 서명 유형입니다.
  uid: Microsoft.Quantum.Canon.CCNOTop
- summary: >+
    > [!WARNING]

    > ResultStack은 더 이상 사용 되지 않습니다.

  uid: Microsoft.Quantum.Canon.ResultStack
operations:
- summary: 대상의 레지스터에서 제어 되는 "및 사다리"를 수행 합니다.
  uid: Microsoft.Quantum.Canon.AndLadder
- summary: Adjoint 작업을 수행 하는 측정을 사용 하 여 두 컨트롤의가 모두 1 상태인 경우에만 지정 된 대상 값을 반전 합니다.
  uid: Microsoft.Quantum.Canon.ApplyAnd
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBound
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyBoundCA
- summary: 레지스터 중 하나에 대 한 다음의 비트에서 작동 하는 두 개의 두 비트 레지스터의 해당 비트에서 제어 되는 CCNOT 게이트의 cascade를 구현 합니다. 두 레지스터의 위치 0에 있는 이상에서 시작 하 여, CCNOT은 대상 레지스터의 위치 1에 있는 나머지 비트에 적용 되 고, 대상 레지스터의 위치 2에 있는 두 번째 위치에 있는 두 번째 위치에 있는 나머지 비트에 의해 제어 `Length(nQubits)-1` 됩니다.
  uid: Microsoft.Quantum.Canon.ApplyCCNOTChain
- summary: 내부에서의 레지스터 패리티를 계산 합니다.
  uid: Microsoft.Quantum.Canon.ApplyCNOTChain
- summary: 대상 비트의 배열에 대 한 패리티를 계산 합니다.
  uid: Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget
- summary: 지정 된 비트 마스크로 지정 된 상태에 의해 제어 되는 단일 작업을 대상 레지스터에 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyControlledOnBitString
- summary: 컨트롤 레지스터 상태가 지정 된 양의 정수에 해당 하는 경우 대상 레지스터에 단일 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyControlledOnInt
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOp
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyCurriedOpCA
- summary: 일련의 복잡 한 단계 배열을 다양 한 양의 레지스터의 숫자 기반 상태에 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyDiagonalUnitary
- summary: Fermionic SWAP을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyFermionicSWAP
- summary: 클래식 비트에 조건 화 된 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIf
- summary: 클래식 비트에 adjointable 작업 조건 화 된을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfA
- summary: 클래식 비트에 제어 가능한 작업 조건 화 된 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfC
- summary: 단일 작업 조건 화 된를 기존 비트에 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfCA
- summary: 는 클래식 비트의 값에 따라 두 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseB
- summary: 클래식 비트의 값에 따라 두 adjointable 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseBA
- summary: 클래식 비트의 값에 따라 제어 가능한 두 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseBC
- summary: 는 클래식 비트의 값에 따라 두 개의 단일 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseBCA
- summary: 클래식 결과의 값에 따라 두 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseR
- summary: 클래식 결과의 값에 따라 두 adjointable 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseRA
- summary: 클래식 결과의 값에 따라 제어 가능한 두 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseRC
- summary: 기존 결과의 값에 따라 두 개의 단일 작업 중 하나를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfElseRCA
- summary: 기존 결과 값에 조건 화 된 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfOne
- summary: 기존 결과 값이 1 인 조건 화 된 adjointable 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfOneA
- summary: 기존 결과 값에 조건 화 된 제어 가능한 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfOneC
- summary: 기존 결과 값에 조건 화 된 단일 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfOneCA
- summary: 클래식 결과 값에 0이 조건 화 된 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfZero
- summary: 클래식 결과 값에 0이 adjointable 작업 조건 화 된을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfZeroA
- summary: 클래식 결과 값이 0이 조건 화 된 제어 가능한 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfZeroC
- summary: 기존 결과 값에 0이 조건 화 된 단일 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyIfZeroCA
- summary: 지정 된 대상 값을 반전 합니다. 두 컨트롤이 모두 1 상태에 있는 경우에만 T-수준 1을 사용 하 여 adjoint 작업을 수행 합니다.
  uid: Microsoft.Quantum.Canon.ApplyLowDepthAnd
- summary: 단일 제어 작업의 곱셈 제어 버전을 적용 합니다. 한정자는 `C` 단일 비트 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyMultiControlledC
- summary: 단일 제어 작업의 곱셈 제어 버전을 적용 합니다. 한정자는 `CA` 단일의 비트 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyMultiControlledCA
- summary: 는 해당 대상의 비트를 0으로 초기화 한다고 가정 하 고 다중 제어 된 Toffoli gate를 구현 합니다.  Adjoint 연산은 대상의 비트를 0으로 다시 설정 한다고 가정 합니다.
  uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledAnd
- summary: 는 해당 대상의 비트를 0으로 초기화 한다고 가정 하 고 다중 제어 된 Toffoli gate를 구현 합니다.  Adjoint 연산은 대상의 비트를 0으로 다시 설정 한다고 가정 합니다.  에는 Rz 깊이가 1이 필요 하지만 도우미의 수는 지 수의 지 수입니다.
  uid: Microsoft.Quantum.Canon.ApplyMultiplyControlledLowDepthAnd
- summary: 단일 비트 레지스터에 대해 동일한 op를 여러 번 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOver
- summary: 단일 비트 레지스터에 대해 동일한 op를 여러 번 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverA
- summary: 단일 비트 레지스터에 대해 동일한 op를 여러 번 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverC
- summary: 단일 비트 레지스터에 대해 동일한 op를 여러 번 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyOpRepeatedlyOverCA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedly
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyA
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyC
- summary: ''
  uid: Microsoft.Quantum.Canon.ApplyOperationRepeatedlyCA
- summary: 여러 기능을 제공 하는 경우 해당 작업을 레지스터에 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyPauli
- summary: 부울 배열의 해당 비트가 지정 된 입력과 일치 하는 경우 배열의 각 비트에 Pauli 연산자를 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyPauliFromBitString
- summary: 작은 endian 표현의 정수를 포함 하는 퀀텀 레지스터에서 퀀텀 푸리에 변환을 수행 합니다.
  uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransform
- summary: 빅 endian 표현의 정수를 포함 하는 퀀텀 레지스터에서 퀀텀 푸리에 변환을 수행 합니다.
  uid: Microsoft.Quantum.Canon.ApplyQuantumFourierTransformBE
- summary: >+
    > [!WARNING]

    > ApplyReversedOpBigEndianA는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEA"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianA
- summary: >+
    > [!WARNING]

    > ApplyReversedOpBigEndianC는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianC
- summary: >+
    > [!WARNING]

    > ApplyReversedOpBigEndianCA는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpBECA>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ApplyReversedOpBEC"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyReversedOpBigEndianCA
- summary: >+
    > [!WARNING]

    > ApplyReversedOpLittleEndianA는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEA"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianA
- summary: >+
    > [!WARNING]

    > ApplyReversedOpLittleEndianC는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianC
- summary: >+
    > [!WARNING]

    > ApplyReversedOpLittleEndianCA는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyReversedOpLECA>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ApplyReversedOpLEC"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyReversedOpLittleEndianCA
- summary: >+
    > [!WARNING]

    > ApplyRippleCarryComparatorLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.CompareUsingRippleCarry"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ApplyRippleCarryComparatorLE
- summary: Ops 및 해당 대상의 목록을 배열에 순차적으로 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOps
- summary: Ops 및 해당 대상의 목록을 배열에 순차적으로 적용 합니다. (Adjoint)
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsA
- summary: Ops 및 해당 대상의 목록을 배열에 순차적으로 적용 합니다. 제어
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsC
- summary: Ops 및 해당 대상의 목록을 배열에 순차적으로 적용 합니다. (Adjoint + 제어 됨)
  uid: Microsoft.Quantum.Canon.ApplySeriesOfOpsCA
- summary: 레지스터의 각 요소에 단일 수준 비트 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToEach
- summary: 레지스터의 각 요소에 단일 수준 비트 작업을 적용 합니다. 한정자는 `A` 단일의 비트 연산이 adjointable을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachA
- summary: 레지스터의 각 요소에 단일 수준 비트 작업을 적용 합니다. 한정자는 `C` 단일 비트 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachC
- summary: 레지스터의 각 요소에 단일 수준 비트 작업을 적용 합니다. 한정자는 `CA` 단일의 비트 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachCA
- summary: 레지스터의 인덱싱된 각 요소에 단일 수준 비트 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndex
- summary: 레지스터의 인덱싱된 각 요소에 단일 수준 비트 작업을 적용 합니다. 한정자는 `A` 단일의 비트 연산이 adjointable을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexA
- summary: 레지스터의 인덱싱된 각 요소에 단일 수준 비트 작업을 적용 합니다. 한정자는 `C` 단일 비트 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexC
- summary: 레지스터의 인덱싱된 각 요소에 단일 수준 비트 작업을 적용 합니다. 한정자는 `CA` 단일의 비트 연산이 adjointable 및 제어 가능 함을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToEachIndexCA
- summary: 배열의 지정 된 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToElement
- summary: 배열의 지정 된 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToElementA
- summary: 배열의 지정 된 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToElementC
- summary: 배열의 지정 된 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToElementCA
- summary: 레지스터의 첫 번째 비트에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubit
- summary: 레지스터의 첫 번째 비트에 작업을 적용 합니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitA
- summary: 레지스터의 첫 번째 비트에 작업 op를 적용 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitC
- summary: 레지스터의 첫 번째 비트에 작업 op를 적용 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstQubitCA
- summary: 레지스터의 처음 3 개 비트에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubits
- summary: 레지스터의 처음 3 개 비트에 작업을 적용 합니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsA
- summary: 레지스터의 처음 3 개 비트에 작업을 적용 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsC
- summary: 레지스터의 처음 3 개 비트에 작업을 적용 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstThreeQubitsCA
- summary: 레지스터의 처음 두 비트에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubits
- summary: 레지스터의 처음 두 비트에 작업을 적용 합니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsA
- summary: 레지스터의 처음 두 비트에 작업을 적용 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsC
- summary: 레지스터의 처음 두 비트에 작업을 적용 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToFirstTwoQubitsCA
- summary: 배열의 첫 번째 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToHead
- summary: 배열의 첫 번째 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToHeadA
- summary: 배열의 첫 번째 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToHeadC
- summary: 배열의 첫 번째 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToHeadCA
- summary: 배열의 마지막 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToMost
- summary: 배열의 마지막 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToMostA
- summary: 배열의 마지막 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToMostC
- summary: 배열의 마지막 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToMostCA
- summary: 지정 된 레지스터 파티션에 작업 쌍을 두 부분으로 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToPartition
- summary: 지정 된 레지스터 파티션에 작업 쌍을 두 부분으로 적용 합니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToPartitionA
- summary: 지정 된 레지스터 파티션에 작업 쌍을 두 부분으로 적용 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToPartitionC
- summary: 지정 된 레지스터 파티션에 작업 쌍을 두 부분으로 적용 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToPartitionCA
- summary: 배열의 첫 번째 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToRest
- summary: 배열의 첫 번째 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToRestA
- summary: 배열의 첫 번째 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToRestC
- summary: 배열의 첫 번째 요소를 제외한 모든 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToRestCA
- summary: 인스턴스의 하위 레지스터에 작업을 적용 합니다. 여기서는 해당 인덱스의 배열에 지정 된 것과 같은 작업을 수행 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToSubregister
- summary: 인스턴스의 하위 레지스터에 작업을 적용 합니다. 여기서는 해당 인덱스의 배열에 지정 된 것과 같은 작업을 수행 합니다. 한정자는 `A` 작업이 adjointable를 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterA
- summary: 인스턴스의 하위 레지스터에 작업을 적용 합니다. 여기서는 해당 인덱스의 배열에 지정 된 것과 같은 작업을 수행 합니다. 한정자는 `C` 작업을 제어할 수 있음을 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterC
- summary: 인스턴스의 하위 레지스터에 작업을 적용 합니다. 여기서는 해당 인덱스의 배열에 지정 된 것과 같은 작업을 수행 합니다. 한정자는 `CA` 작업을 제어 하 고 adjointable 나타냅니다.
  uid: Microsoft.Quantum.Canon.ApplyToSubregisterCA
- summary: 배열의 마지막 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToTail
- summary: 배열의 마지막 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToTailA
- summary: 배열의 마지막 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToTailC
- summary: 배열의 마지막 요소에 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyToTailCA
- summary: 두 작업을 수행 하는 경우 conjugated로 다른 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWith
- summary: 두 작업을 수행 하는 경우 conjugated로 다른 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithA
- summary: 두 작업을 수행 하는 경우 conjugated로 다른 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithC
- summary: 두 작업을 수행 하는 경우 conjugated로 다른 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithCA
- summary: 일부 입력을 허용 하는 작업, 해당 작업과 호환 되는 출력을 반환 하는 함수 및이 함수에 대 한 입력을 제공 하는 경우 함수를 사용 하 여 작업에 필요한 형식으로 입력을 변환 하는 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformation
- summary: 일부 입력을 허용 하는 작업, 해당 작업과 호환 되는 출력을 반환 하는 함수 및이 함수에 대 한 입력을 제공 하는 경우 함수를 사용 하 여 작업에 필요한 형식으로 입력을 변환 하는 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationA
- summary: 일부 입력을 허용 하는 작업, 해당 작업과 호환 되는 출력을 반환 하는 함수 및이 함수에 대 한 입력을 제공 하는 경우 함수를 사용 하 여 작업에 필요한 형식으로 입력을 변환 하는 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationC
- summary: 일부 입력을 허용 하는 작업, 해당 작업과 호환 되는 출력을 반환 하는 함수 및이 함수에 대 한 입력을 제공 하는 경우 함수를 사용 하 여 작업에 필요한 형식으로 입력을 변환 하는 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApplyWithInputTransformationCA
- summary: 퀀텀 레지스터에 AQFT (대략적인 퀀텀 푸리에 변환)을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApproximateQFT
- summary: 지정 된 허용 오차에 따라 작은 회전 각도를 잘라내는 상위 비트 레지스터의 숫자 기반 상태에 복잡 한 단계의 배열을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApproximatelyApplyDiagonalUnitary
- summary: 지정 된 허용 오차에 따라 작은 회전 각도를 잘라내는 조건 화 된의 배열에 Pauli 회전을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexPauli
- summary: 지정 된 허용 오차에 따라 작은 회전 각도를 잘라내는 조건 화 된의 배열에 Pauli Z 회전을 적용 합니다.
  uid: Microsoft.Quantum.Canon.ApproximatelyMultiplexZ
- summary: >+
    > [!WARNING]

    > AssertHighestBit는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.AssertMostSignificantBit>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.AssertMostSignificantBit"을 사용하세요.

  uid: Microsoft.Quantum.Canon.AssertHighestBit
- summary: >+
    > [!WARNING]

    > AssertLessThanPhaseLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.AssertPhaseLessThan>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.AssertPhaseLessThan"을 사용하세요.

  uid: Microsoft.Quantum.Canon.AssertLessThanPhaseLE
- summary: >+
    > [!WARNING]

    > AssertPhase는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Diagnostics.AssertPhase>를 사용하십시오.

  uid: Microsoft.Quantum.Canon.AssertPhase
- summary: >+
    > [!WARNING]

    > CNOTChain은 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>를 사용하십시오.

  uid: Microsoft.Quantum.Canon.CNOTChain
- summary: >+
    > [!WARNING]

    > CNOTChainTarget는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Canon.ApplyCNOTChainWithTarget>를 사용하십시오.

  uid: Microsoft.Quantum.Canon.CNOTChainTarget
- summary: >-
    제어 된 X (CX) 게이트를 한 쌍의 비트에 적용 합니다.

    $ $ \begin{align} \left (\begin{matrix} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 0 & 0 & 0 & 1 0 & 0 & 1 \\ \\ \\ \\ & 0 \end{matrix}\right) \end{align}, $ $ 여기서 행과 열은 퀀텀 개념 가이드에서와 같이 구성 됩니다.
  uid: Microsoft.Quantum.Canon.CX
- summary: >-
    제어 된-Y (CY) 게이트를 한 쌍의 비트에 적용 합니다.

    $ $ \begin{align} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 0 & 0 & 0 & \\ \\ -i 0 & 0 \\ \\ & i & 0 \end{align}, $ $ 여기서 행과 열은 퀀텀 개념 가이드에서와 같이 구성 됩니다.
  uid: Microsoft.Quantum.Canon.CY
- summary: >-
    CZ (제어-Z) 게이트를 다양 한 쌍에 적용 합니다.

    $ $ \begin{align} 1 & 0 & 0 & 0 0 & 1 & 0 & 0 0 & 0 & 1 & 0 0 & 0 & 0 & \\ \\ \\ \\ \\ \\ -1 \end{align}, $ $ 여기서 행과 열은 퀀텀 개념 가이드에서와 같이 구성 됩니다.
  uid: Microsoft.Quantum.Canon.CZ
- summary: >+
    > [!WARNING]

    > CascadeCCNOT는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Canon.ApplyCCNOTChain>를 사용하십시오.

  uid: Microsoft.Quantum.Canon.CascadeCCNOT
- summary: >+
    > [!WARNING]

    > CascadeCNOT는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Canon.ApplyCNOTChain>를 사용하십시오.

    >

    > @"microsoft.quantum.canon.applycnotchain"을 사용하세요.

  uid: Microsoft.Quantum.Canon.CascadeCNOT
- summary: 지정 된 작업을 지연 시간에 적용 합니다.
  uid: Microsoft.Quantum.Canon.Delay
- summary: 지정 된 작업을 지연 시간에 적용 합니다.
  uid: Microsoft.Quantum.Canon.DelayA
- summary: 지정 된 작업을 지연 시간에 적용 합니다.
  uid: Microsoft.Quantum.Canon.DelayC
- summary: 지정 된 작업을 지연 시간에 적용 합니다.
  uid: Microsoft.Quantum.Canon.DelayCA
- summary: >-
    Z와 Y 축을 교환 하는 Hadamard 변환에 Y 기반 아날로그를 적용 합니다.

    단일 \begin{align}의 Y Hadamard 변환 $H _Y = S H $: H_Y \mathrel{: =} \frac {1} {\sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ i &-i \end{bmatrix}. \end{align}
  uid: Microsoft.Quantum.Canon.HY
- summary: >+
    > [!WARNING]

    > InPlaceMajority는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ApplyMajorityInPlace>를 사용하십시오.

    >

    > @"microsoft.quantum.arithmetic.applymajorityinplace"을 사용하세요.

  uid: Microsoft.Quantum.Canon.InPlaceMajority
- summary: >+
    > [!WARNING]

    > InPlaceXorBE는 더 이상 사용 되지 않습니다. 대신 <xref:ApplyReversedOpLECA(ApplyXorInPlace(value, _), target)>를 사용하십시오.

    >

    > 이 작업은 제거 되었습니다.

  uid: Microsoft.Quantum.Canon.InPlaceXorBE
- summary: >+
    > [!WARNING]

    > InPlaceXorLE은 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Measurement.ApplyXorInPlace>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Measurement.ApplyXorInPlace"을 사용하세요.

  uid: Microsoft.Quantum.Canon.InPlaceXorLE
- summary: >+
    > [!WARNING]

    > IntegerIncrementLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.IncrementByInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.IncrementByInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.IntegerIncrementLE
- summary: >+
    > [!WARNING]

    > IntegerIncrementPhaseLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.IncrementPhaseByInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.IntegerIncrementPhaseLE
- summary: 정수 범위의 데카르트 제곱에 있는 각 인덱스에 대해 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.IterateThroughCartesianPower
- summary: 여러 범위의 데카르트 곱에서 각 인덱스에 대 한 작업을 적용 합니다.
  uid: Microsoft.Quantum.Canon.IterateThroughCartesianProduct
- summary: 여러 비트의 논리적 AND를 계산 합니다.
  uid: Microsoft.Quantum.Canon.LogicalANDMeasAndFix
- summary: >+
    > [!WARNING]

    > ModularAddProductLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.MultiplyAndAddByModularInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ModularAddProductLE
- summary: >+
    > [!WARNING]

    > ModularAddProductPhaseLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.MultiplyAndAddPhaseByModularInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ModularAddProductPhaseLE
- summary: >+
    > [!WARNING]

    > ModularIncrementLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.ModularIncrementByInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.ModularIncrementByInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ModularIncrementLE
- summary: >+
    > [!WARNING]

    > ModularIncrementPhaseLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.IncrementPhaseByModularInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ModularIncrementPhaseLE
- summary: >+
    > [!WARNING]

    > ModularMultiplyByConstantLE는 더 이상 사용 되지 않습니다. 대신 <xref:Microsoft.Quantum.Arithmetic.MultiplyByModularInteger>를 사용하십시오.

    >

    > @"Microsoft.Quantum.Arithmetic.MultiplyByModularInteger"을 사용하세요.

  uid: Microsoft.Quantum.Canon.ModularMultiplyByConstantLE
- summary: >-
    숫자 상태의 배열에 의해 제어 되는 작업 배열을 적용 합니다.

    즉, $n $-\ket{j} $로 제어 될 때 단일 $V _j $를 적용 하는 곱하기 제어 된 단일 $U 작업을 적용 합니다.

    $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $.
  uid: Microsoft.Quantum.Canon.MultiplexOperations
- summary: >-
    N-\ket{j} $로 제어 될 때 단일 $V _j $를 적용 하는 곱하기 제어 된 단일 $U 작업을 적용 합니다.

    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $입니다.
  uid: Microsoft.Quantum.Canon.MultiplexOperationsBruteForceFromGenerator
- summary: >-
    N-\ket{j} $로 제어 될 때 단일 $V _j $를 적용 하는 곱하기 제어 된 단일 $U 작업을 적용 합니다.

    $U = \sum ^ {N-1} _ {j = 0} \ket{j}\bra{j}\otimes V_j $입니다.
  uid: Microsoft.Quantum.Canon.MultiplexOperationsFromGenerator
- summary: MultiplexOperations의 구현 단계입니다.
  uid: Microsoft.Quantum.Canon.MultiplexOperationsWithAuxRegister
- summary: 원하는 비트 배열에 Pauli 회전 조건 화 된을 적용 합니다.
  uid: Microsoft.Quantum.Canon.MultiplexPauli
- summary: 조건 화 된 배열에 Pauli Z 회전을 적용 합니다.
  uid: Microsoft.Quantum.Canon.MultiplexZ
- summary: 인수에 대해 id 연산 (no op)을 수행 합니다.
  uid: Microsoft.Quantum.Canon.NoOp
- summary: 교환 작업을 사용 하 여 Permutes 된 비트
  uid: Microsoft.Quantum.Canon.PermuteQubits
- summary: 빅 endian 표현의 정수를 포함 하는 퀀텀 레지스터에서 퀀텀 푸리에 변환을 수행 합니다.
  uid: Microsoft.Quantum.Canon.QFT
- summary: 작은 endian 표현의 정수를 포함 하는 퀀텀 레지스터에서 퀀텀 푸리에 변환을 수행 합니다.
  uid: Microsoft.Quantum.Canon.QFTLE
- summary: >-
    단계 이동 작업을 수행 합니다.

    $R = \boldone-(1-e ^ {i \phi}) \ket{0\cdots 0} \bra{0\cdots 0} $.
  uid: Microsoft.Quantum.Canon.RAll0
- summary: >-
    단계 이동 작업을 수행 합니다.

    $R = \boldone-(1-e ^ {i \phi}) \ket{1\cdots 1} \bra{1\cdots 1} $.
  uid: Microsoft.Quantum.Canon.RAll1
- summary: 지정 된 횟수 만큼 작업을 반복 합니다.
  uid: Microsoft.Quantum.Canon.Repeat
- summary: 지정 된 횟수 만큼 작업을 반복 합니다.
  uid: Microsoft.Quantum.Canon.RepeatA
- summary: 지정 된 횟수 만큼 작업을 반복 합니다.
  uid: Microsoft.Quantum.Canon.RepeatC
- summary: 지정 된 횟수 만큼 작업을 반복 합니다.
  uid: Microsoft.Quantum.Canon.RepeatCA
- summary: 에서는 교환 게이트를 사용 하 여 레지스터에서의 비트 순서를 반대로 바꿉니다.
  uid: Microsoft.Quantum.Canon.SwapReverseRegister
- summary: First order Trotter – Suzuki 통합자의 구현입니다.
  uid: Microsoft.Quantum.Canon.Trotter1ImplCA
- summary: 두 번째 주문 Trotter – Suzuki 통합자의 구현입니다.
  uid: Microsoft.Quantum.Canon.Trotter2ImplCA
- summary: 짝수 order Trotter – Suzuki 통합자의 재귀 구현입니다.
  uid: Microsoft.Quantum.Canon.TrotterArbitraryImplCA
- summary: 의 구현 단계입니다 `MultiplexOperationsFromGenerator` .
  uid: Microsoft.Quantum.Canon._MultiplexOperationsFromGenerator
summary: ''
uid: Microsoft.Quantum.Canon
metadata:
  ms.openlocfilehash: 15dd183daa445cbde87b573386780d3da34beb86
  ms.sourcegitcommit: 29e0d88a30e4166fa580132124b0eb57e1f0e986
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 10/27/2020
  ms.locfileid: "92715982"
