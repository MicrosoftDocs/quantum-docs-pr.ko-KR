### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexpauli
name: MultiplexPauli
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  원하는 비트 배열에 Pauli 회전 조건 화 된을 적용 합니다.


  이렇게 하면 $ \ theta_j $ 각도에 따라 회전을 수행 하는 곱하기 제어 된 단일 연산이 적용 됩니다 .이는 $n $-stbit number state $ \ket{j} $로 제어 되는 경우 $P $입니다.

  특히이 작업은 단일 작업으로 표시 됩니다.


  $ $ \begin{align} U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j} \otimes e ^ {i P \ theta_j}.

  \end{align}


  ##
remarks: '`coefficients`$2 ^ n $ 미만으로 지정 된 경우는 $ \ theta_j = $0.0 요소로 채워집니다.'
syntax: 'operation MultiplexPauli (coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
input:
  content: '(coefficients : Double[], pauli : Pauli, control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: 최대 $2 ^ n $ 계수 $ \ theta_j $의 배열입니다. $J $ th 계수는 작은 endian 형식으로 인코딩된 number state $ \ket{j} $를 인덱싱합니다.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: pauli
    summary: Pauli 연산자는 회전 축을 결정 하는 $ $P 합니다.
    isPrimitive: true
    uid: Pauli
  - name: control
    summary: 숫자 상태 $ \ket{j} $를 거의 endian 형식으로 인코딩하는 $-# 컨트롤 레지스터를 $n 합니다.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $E ^ {i P \ theta_j} $로 회전 한 단일 비트 레지스터입니다.
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- approximatelymultiplexpauli
metadata:
  ms.openlocfilehash: 202a1caec428d83027de127b08f05a8e07a63caa
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82678775"
