### YamlMime:QSharpType
uid: microsoft.quantum.diagnostics.assertoperationsequalreferenced
name: AssertOperationsEqualReferenced
type: operation
namespace: Microsoft.Quantum.Diagnostics
summary: >-
  두 작업이 지정 된 경우는 모든 입력 상태에 대해 동일 하 게 작동 한다는 것을 어설션 합니다.


  이 어설션은 Choi – Jamiłkowski isomorphism를 사용 하 여 두 entangled 레지스터의를 사용 하는 것으로 어설션을 줄이는 방법으로 구현 됩니다.

  따라서이 작업은 테스트 되는 각 작업에 대 한 단일 호출만 필요 하지만 할당 해야 하는 것은 두 배입니다.

  이 어설션을 사용 하면 예를 들어, 작업의 최적화 된 버전이 naive 구현에 동일 하 게 작동 하거나, 비 퀀텀 입력 범위에서 작동 하는 작업이 알려진 사례에 동의 하는 경우를 확인할 수 있습니다.
remarks: >-
  이 작업을 수행 하려면 예상 되는 동작을 모델링 하는 작업이 adjointable 해야 합니다. 따라서 역은 대상 레지스터 에서만 수행 될 수 있습니다.

  공식적으로는 이러한 요구 사항을 완화 하는 바꾸기 작업을 지정할 수 있지만,이 경우에는 바꾸기 작업이 임의의 퀀텀 작업에 대해 일반적으로 실제로 realizable 되지 않으므로이 옵션으로 여기에 포함 되지 않습니다.
syntax: 'operation AssertOperationsEqualReferenced (nQubits : Int, actual : (Qubit[] => Unit), expected : (Qubit[] => Unit is Adj)) : Unit'
input:
  content: '(N Bits: Int, actual: (Adj [] = > Unit)이 필요 합니다. ([] = > Unit is))'
  types:
  - name: N의 비트
    summary: 각 작업에 전달할 비트 수입니다.
    isPrimitive: true
    uid: Int
  - name: 실제
    summary: 테스트할 작업입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: 있어야
    summary: 테스트 중인 작업의 예상 동작을 정의 하는 작업입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
output:
  content: 단위
  types:
  - isPrimitive: true
    uid: Unit
ms.openlocfilehash: 0dfadb6be785c7ba4eaa517c725b79955e037a32
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 10/30/2019
ms.locfileid: "73066577"
