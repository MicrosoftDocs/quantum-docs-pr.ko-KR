### YamlMime:QSharpType
uid: microsoft.quantum.canon.applytoelement
name: ApplyToElement
type: operation
namespace: microsoft.quantum.canon
summary: >-
  배열의 지정 된 요소에 작업을 적용 합니다.


  작업 `op` , 인덱스 `index` 및 대상의 배열이 지정 된 `targets` 경우 적용 됩니다 `op(targets[index])` .
syntax: "operation ApplyToElement (op : ('T => Unit), index : Int, targets : 'T[]) : Unit"
input:
  content: "(op : ('T => Unit), index : Int, targets : 'T[])"
  types:
  - name: op
    summary: 적용 될 작업입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
  - name: index
    summary: 대상 배열의 인덱스입니다.
    isPrimitive: true
    uid: Int
  - name: targets
    isArray: true
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 적용할 작업의 입력 형식입니다.
seeAlso:
- microsoft.quantum.canon.applytoelementc
- microsoft.quantum.canon.applytoelementa
- microsoft.quantum.canon.applytoelementca
metadata:
  ms.openlocfilehash: b7bb8bedfa708439434f7f011adb9ed4c85f997e
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91468654"
