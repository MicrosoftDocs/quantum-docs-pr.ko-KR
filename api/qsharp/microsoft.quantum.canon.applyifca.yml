### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifca
name: ApplyIfCA
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  단일 작업 조건 화 된를 기존 비트에 적용 합니다.


  작업 `op` 및 비트 값 `bit`지정 하는 경우 `bit` `true`되는 경우 `target`에 `op` 적용 됩니다. `false`경우 `target`가 발생 하지 않습니다.

  `CA` 접미사는 적용 될 작업이 단일 (제어 가능 하 고 adjointable) 임을 나타냅니다.
examples: >-
  다음은 `Bool` 값의 배열로 제공 된 기존 비트 문자열로 표현 되는 계산 기준 상태로 값의 레지스터를 준비 합니다.


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zip(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIfCA (op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Ctl + Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 조건부로 적용 될 작업입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: bit
    summary: op가 적용 되는지 여부를 제어 하는 부울입니다.
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 작업이 적용 되는 입력입니다.
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 조건부로 적용할 작업의 입력 형식입니다.
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
ms.openlocfilehash: c78136688111a71e6a9a58972c9b9bb71603e0cf
ms.sourcegitcommit: 8becfb03eb60ba205c670a634ff4daa8071bcd06
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 10/31/2019
ms.locfileid: "73213758"
