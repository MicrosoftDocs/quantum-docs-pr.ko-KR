### YamlMime:QSharpNamespace
uid: microsoft.quantum.diagnostics
name: Microsoft.Quantum.Diagnostics
functions:
- uid: microsoft.quantum.diagnostics.allequalityfactb
  summary: 부울 값의 두 배열이 동일한 것을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.dumpmachine
  summary: 현재 대상 컴퓨터의 상태를 덤프 합니다.
- uid: microsoft.quantum.diagnostics.dumpregister
  summary: 지정 된 비트와 연결 된 현재 대상 컴퓨터의 상태를 덤프 합니다.
- uid: microsoft.quantum.diagnostics.equalityfactb
  summary: 기존 Bool 변수에 예상 값이 있음을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.equalityfactc
  summary: 복소수에 필요한 값이 있음을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.equalityfactcp
  summary: 복소수에 필요한 값이 있음을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.equalityfacti
  summary: 기존 Int 변수에 예상 값이 있음을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.equalityfactl
  summary: 기존 BigInt 변수에 필요한 값이 있음을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.equalityfactr
  summary: 기존 결과 변수가 예상 값을 가지는 것을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.equalitywithintolerancefact
  summary: 고전 부동 소수점 값에 지정 된 절대 허용 오차 값이 필요한 값을 포함 하는 클레임을 나타냅니다.
- uid: microsoft.quantum.diagnostics.fact
  summary: 는 기존 조건이 true 임을 선언 합니다.
- uid: microsoft.quantum.diagnostics.nearequalityfactc
  summary: 기존 복소수에 필요한 값이 1e-10의 작은 허용 오차 보다 많은 것을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.nearequalityfactcp
  summary: 기존 복소수에 필요한 값이 1e-10의 작은 허용 오차 보다 많은 것을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.nearequalityfactd
  summary: 고전적인 부동 소수점 값에 필요한 값이 1e-10의 최대 허용 오차 보다 작은 것을 어설션 합니다.
operations:
- uid: microsoft.quantum.diagnostics.assertallzero
  summary: 지정 된 비트를 모두 $ \ket{0}$ state로 지정 하는 어설션입니다.
- uid: microsoft.quantum.diagnostics.assertallzerowithintolerance
  summary: 지정 된 \ket는 지정 된 허용 오차까지 모두 ${0}$ 상태에 있습니다.
- uid: microsoft.quantum.diagnostics.assertoperationsequalinplace
  summary: >-
    두 작업이 지정 된 경우는 모든 입력 상태에 대해 동일 하 게 작동 한다는 것을 어설션 합니다.


    이 어설션은 $V의 모든 상태에 대 한 작업의 동작을 확인 하 여 구현 됩니다. \otimes V_ {n-1} $, 여기서 $V _k $은 상태 $ \ket{0}$, $ \ket{1}$, $ \ket{+} $ 및 $ \ket{i} $ (+ 1 eigenstate Y 연산자의 1 eigenstate) 중 하나입니다.


    이 어설션은 $ opbits $n를 사용 하 고 비교 되는 작업을 여러 번 호출 해야 합니다.
- uid: microsoft.quantum.diagnostics.assertoperationsequalinplacecompbasis
  summary: >-
    연산에 대 한 작업의 동작을 확인 하 여 지정 된 입력 크기에 대 한 작업의 `expectedU` 작업 `givenU` 같은지 확인 합니다.

    이는 두 unitaries의 같음에 대 한 필수 조건 이지만 충분 하지 않습니다.
- uid: microsoft.quantum.diagnostics.assertoperationsequalreferenced
  summary: >-
    두 작업이 지정 된 경우는 모든 입력 상태에 대해 동일 하 게 작동 한다는 것을 어설션 합니다.


    이 어설션은 Choi – Jamiłkowski isomorphism를 사용 하 여 두 entangled 레지스터의를 사용 하는 것으로 어설션을 줄이는 방법으로 구현 됩니다.

    따라서이 작업은 테스트 되는 각 작업에 대 한 단일 호출만 필요 하지만 할당 해야 하는 것은 두 배입니다.

    이 어설션을 사용 하면 예를 들어, 작업의 최적화 된 버전이 naive 구현에 동일 하 게 작동 하거나, 비 퀀텀 입력 범위에서 작동 하는 작업이 알려진 사례에 동의 하는 경우를 확인할 수 있습니다.
- uid: microsoft.quantum.diagnostics.assertqubit
  summary: Eibit `q`가 Pauli Z 연산자의 예상 eigenstate 임을 어설션 합니다.
- uid: microsoft.quantum.diagnostics.assertqubitisinstatewithintolerance
  summary: >-
    예상 상태에서의 비트를 어설션 합니다.


    `expected`는 복합 벡터, $ \ket{\psi} = \begin{bmatrix}a & b\end {bmatrix} ^ {\mathrm{T}} $를 나타냅니다.

    $A $, $b $를 나타내는 튜플의 첫 번째 요소는 복소수의 실수부 이며 두 번째 요소는 허수 부분입니다.

    마지막 인수는 어설션이 만들어지는 허용 오차를 정의 합니다.
- uid: microsoft.quantum.diagnostics.assertqubitwithintolerance
  summary: 지정 된 허용 오차까지 강화 비트 `q` Pauli Z 연산자의 예상 eigenstate 임을 어설션 합니다.
newtypes:
- uid: microsoft.quantum.diagnostics.test
  summary: 단위 테스트를 표시 하는 데 사용 되는 컴파일러에서 인식할 수 있는 특성입니다.
summary: " # <a name=\"summary\"></a>요약\n 이 네임 스페이스는 어설션 작업 및 클레임 함수를 비롯 하 여 진단 목적에 유용한 함수 및 작업을 포함 합니다."
metadata:
  ms.openlocfilehash: a633a9555f380e6aa6c6701d277d026c58130ff2
  ms.sourcegitcommit: 27c9bf1aae923527aa5adeaee073cb27d35c0ca1
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 12/05/2019
  ms.locfileid: "74858278"
