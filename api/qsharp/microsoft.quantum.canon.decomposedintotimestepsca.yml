### YamlMime:QSharpType
uid: microsoft.quantum.canon.decomposedintotimestepsca
name: DecomposedIntoTimeStepsCA
type: function
namespace: microsoft.quantum.canon
summary: 지정 된 작업에 대해 Trotter – Suzuki 인티그레이터를 구현 하는 작업을 반환 합니다.
remarks: >-
  이 함수는와 같이 호출 될 때 `order` `1` 가장 낮은 Trotter – Suzuki 인티그레이터 $ $ \begin{align} S_1 (\lambda) = \ prod_ {j = 1} ^ {m} e ^ {H_j \lambda}에서 시뮬레이션할 수 있는 작업을 반환 합니다. \end{align} $ $ where [0508139](https://arxiv.org/abs/quant-ph/0508139) 표기법을 따르고 $ \lambda $는 진화 시간 (반환 된 작업의 첫 번째 입력으로 표시 됨)이 될 수 있습니다. 그리고 $ \{ H_j \} _ {j = 1} ^ {m} $은 `op(j, lambda, _)` 단일 연산자 $e ^ {H_j \Lambda} $에서 시뮬레이션 되는 (Hermitian) 동적 생성기 집합 이어야 합니다.


  마찬가지로의는 `order` `2` 두 번째 순서 대칭 Trotter – Suzuki 인티그레이터 $ $ \begin{align} S_2 (\lambda) = \ prod_ {j = 1} ^ {m} e ^ {H_k \lambda} \ prod_ {j ' = m} ^ {1} e ^ {H_ {j '} \lambda/2}를 반환 합니다.

  \end{align} $ $


  의 짝수 값은 보다 높은 값을 `order` 사용 하 여 [quant-ph/0508139](https://arxiv.org/abs/quant-ph/0508139)구현 됩니다.
syntax: "function DecomposedIntoTimeStepsCA ((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int) : ((Double, 'T) => Unit is Adj + Ctl)"
references: '- [*D. Berry, G. Ahokas, Cleve, b. Sanders*](https://arxiv.org/abs/quant-ph/0508139)'
input:
  content: "((nSteps : Int, op : ((Int, Double, 'T) => Unit is Adj + Ctl)), trotterOrder : Int)"
  types:
  - name: nSteps
    summary: 시간 단계로 분해할 작업 수입니다.
    isPrimitive: true
    uid: Int
  - name: op
    summary: 분해를 위해 인덱스 입력 (형식 `Int` ) 및 시간 입력 (형식)을 허용 하는 작업입니다 `Double` .
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Int
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: trotterOrder
    summary: >-
      사용할 Trotter – Suzuki 통합자의 순서를 선택 합니다.

      주문 1과 주문 2, 4, 6,... 는 현재 지원 됩니다.
    isPrimitive: true
    uid: Int
output:
  content: ((Double, 'T) => Unit is Adj + Ctl)
  types:
  - summary: Trotter – Suzuki 인티그레이터를 구현 하는 단일를 반환 합니다. 여기서 첫 번째 매개 변수는 `Double` 통합 단계 크기이 고, 두 번째 매개 변수는 처리 대상인 대상입니다.
    isOperation: true
    input:
      types:
      - isPrimitive: true
        uid: Double
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
typeParameters:
- uid: "'T"
  summary: 각 시간 단계가 작동 해야 하는 형식입니다. 일반적으로 `Qubit[]` 또는 `Qubit` 입니다.
metadata:
  ms.openlocfilehash: e3febe45478ca86a36844d6af75884872cb12680
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89356544"
