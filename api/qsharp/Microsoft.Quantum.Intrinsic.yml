### YamlMime:QSharpNamespace
uid: microsoft.quantum.intrinsic
name: Microsoft.Quantum.Intrinsic
functions:
- uid: microsoft.quantum.intrinsic.message
  summary: 메시지를 기록 합니다.
operations:
- uid: microsoft.quantum.intrinsic.assert
  summary: "\n> [!WARNING]\n> 사용되지 않음\n\nAssert는 사용 되지 않습니다. 대신 @\"microsoft.quantum.diagnostics.assertmeasurement\"를 사용하십시오."
- uid: microsoft.quantum.intrinsic.assertprob
  summary: "\n> [!WARNING]\n> 사용되지 않음\n\nAssertProb는 더 이상 사용 되지 않습니다. 대신 @\"microsoft.quantum.diagnostics.assertmeasurementprobability\"를 사용하십시오."
- uid: microsoft.quantum.intrinsic.ccnot
  summary: 3 가지 비트에 이중 제어 – (CCNOT) 게이트를 적용 합니다.
- uid: microsoft.quantum.intrinsic.cnot
  summary: >-
    제어 되지 않는 (CNOT) 게이트를 한 쌍의 비트에 적용 합니다.


    \begin{align} \operatorname{CNOT} \mathrel{: =} \begin{bmatrix} 1 & 0 & 0 & 0 \\ \\ 0 & 1 & 0 & 0 0 & 0 & 0 & 1 0 & 0 & \\ \\ \\ \\ 1 & 0 \end{bmatrix}, \end{align}


    여기에서 행과 열은 퀀텀 개념 가이드에서로 정렬 됩니다.
- uid: microsoft.quantum.intrinsic.exp
  summary: >-
    다중값 비트 Pauli 연산자의 지 수를 적용 합니다.


    \begin{align} e ^ {i \theta [P_0 \otime P_1 \coP_ {N-1}]}, \end{align} $P _i $은의 $i $ th 요소 `paulis` 이며 where $N = $입니다 `Length(paulis)` .
- uid: microsoft.quantum.intrinsic.expfrac
  summary: >-
    Dyadic 분수로 지정 된 인수를 사용 하 여 다중 기능 비트 Pauli 연산자의 지 수를 적용 합니다.


    \begin{align} e ^ {i \pi k [P_0 \otime P_1 \coP_ {N-1}]/2 ^ N}, \end{align} where $P _i $은의 $i $ th 요소 `paulis` 이며 where $N = $입니다 `Length(paulis)` .
- uid: microsoft.quantum.intrinsic.h
  summary: >-
    Hadamard 변환을 단일의 비트에 적용 합니다.


    \begin{align} H \mathrel{: =} \frac {1} {\sqrt {2} } \begin{bmatrix} 1 & 1 \\ \\ 1 &-1 \end{bmatrix}.

    \end{align}
- uid: microsoft.quantum.intrinsic.i
  summary: 단일 비트의 id 연산 (no op)을 수행 합니다.
- uid: microsoft.quantum.intrinsic.m
  summary: >-
    Pauli $Z $ 기준에서 단일 고 비트를 측정 합니다.


    출력 결과는 배포 \begin{align} \Pr (\texttt{Zero} | \ket{\psi}) = \braket{\psi | 0} \braket{0 | \psi}.에 의해 제공 됩니다.

    \end{align}
- uid: microsoft.quantum.intrinsic.measure
  summary: >-
    지정 된 Pauli 기반에서 하나 이상의 값에 대 한 공동 측정을 수행 합니다.


    출력 결과는 배포에 의해 제공 됩니다. \begin{align} \Pr (\texttt{Zero} | \ket{\psi}) = \frac12 \braket{\pr \pr | \pr (\boldone + P_0 \otime P_1 \ost\oatimes P_ {N-1} \pr) \pr | \pr}, \end{align} 여기서 $P _i $은의 $i $ th 요소이 `bases` 고 where $N = \texttt{Length} (\texttt{bases}) $입니다.

    즉, 측정값은 `Result` 관찰 된 측정 효과의 eigenvalue가 $ (-1) ^ d $ 인 $d $를 반환 합니다.
- uid: microsoft.quantum.intrinsic.r
  summary: >-
    지정 된 Pauli 축에 대 한 회전을 적용 합니다.


    \begin{align} R_ {\mu} (\ 테타) \mathrel{: =} e ^ {-i \theta \ sigma_ {\mu}/2}, \end{align} where $ \theta \theta \{ i, X, Y, Z \} $.
- uid: microsoft.quantum.intrinsic.r1
  summary: >-
    지정 된 각도로 $ \ket $ 상태에 대 한 회전을 적용 {1} 합니다.


    \begin{align} R_1 (\theta) \mathrel{: =} \operatorname{diag} (1, e ^ {i\theta}).

    \end{align}
- uid: microsoft.quantum.intrinsic.r1frac
  summary: >-
    Dyadic 분수로 지정 된 각도로 $ \ket $ 상태에 대 한 회전을 적용 {1} 합니다.


    \begin{align} R_1 (n, k) \mathrel{: =} \operatorname{diag} (1, e ^ {i \pi k/2 ^ n}).

    \end{align}


    > [!WARNING]

    > 이 작업은에서 **반대** 부호 규칙을 사용 @"microsoft.quantum.intrinsic.r" 하며에 포함 된 $1/2 $의 요소를 포함 하지 않습니다 @"microsoft.quantum.intrinsic.r1" .
- uid: microsoft.quantum.intrinsic.random
  summary: >-
    Random 연산은 입력으로 double 배열을 사용 하 고 임의로 선택 된 인덱스를로 배열에 반환 합니다 `Int` .

    특정 인덱스를 선택할 확률은 해당 인덱스에 있는 배열 요소의 값에 비례 합니다.

    0과 같은 배열 요소는 무시 되 고 해당 인덱스는 반환 되지 않습니다. 배열 요소가 0 보다 작거나 0 보다 큰 배열 요소가 없으면 작업이 실패 합니다.
- uid: microsoft.quantum.intrinsic.reset
  summary: 단일의 비트를 고려 하 여이를 측정 하 고 안전 하 게 해제할 수 있도록 | 0 ⟩ 상태를 확인 합니다.
- uid: microsoft.quantum.intrinsic.resetall
  summary: 원하는 비트 배열을 지정 하 고이를 측정 하 여 안전 하 게 해제할 수 있도록 | 0 ⟩ 상태에 있는지 확인 합니다.
- uid: microsoft.quantum.intrinsic.rfrac
  summary: >-
    Dyadic 분수로 지정 된 각도 만큼 지정 된 Pauli 축에 대 한 회전을 적용 합니다.


    \begin{align} R_ {\mu} (n, k) \mathrel{: =} e ^ {i \pi n \ sigma_ {\mu}/2 ^ k}, \end{align} where $ \pi \pi \{ i, X, Y, Z \} $.


    > [!WARNING]

    > 이 작업에서는의 **반대** 서명 규칙을 사용 @"microsoft.quantum.intrinsic.r" 합니다.
- uid: microsoft.quantum.intrinsic.rx
  summary: "지정 된 각도 만큼 $x $ 축에 대 한 회전을 적용 합니다.\n\n\\begin{align} R_x (\\theta) \\mathrel{: =} e ^ {-i \\om\\ sigma_x/2} = \\begin{bmatrix} \\theta \\frac{\\theta} {2} &-i\\sin \\frac{\\theta} {2} \\\\ \\\\ -i\\sin \\frac{\\theta} {2} & \\theta \\frac{\\theta} {2} \\end{bmatrix}.  \n\\end{align}"
- uid: microsoft.quantum.intrinsic.ry
  summary: "지정 된 각도 만큼 $y $ 축에 대 한 회전을 적용 합니다.\n\n\\begin{align} R_y (\\theta) \\mathrel{: =} e ^ {-i \\om\\ sigma_y/2} = \\begin{bmatrix} \\theta \\frac{\\theta} {2} &-\\theta \\frac{\\theta} {2} \\\\ \\\\ \\theta \\frac{\\theta} {2} & \\theta \\frac{\\theta} {2} \\end{bmatrix}.  \n\\end{align}"
- uid: microsoft.quantum.intrinsic.rz
  summary: >-
    지정 된 각도 만큼 $z $ 축에 대 한 회전을 적용 합니다.


    \begin{align} R_z (\theta) \mathrel{: =} e ^ {-i \theta \ sigma_z/2} = \begin{bmatrix} e ^ {-i \theta/2} & 0 \\ \\ 0 & e ^ {i \theta/2} \end{bmatrix}.

    \end{align}
- uid: microsoft.quantum.intrinsic.s
  summary: 단일의 단일 비트에 게이트를 적용 합니다.
- uid: microsoft.quantum.intrinsic.swap
  summary: >-
    교환 게이트를 다양 한 쌍에 적용 합니다.


    \begin{align} \operatorname{SWAP} \mathrel{: =} \begin{bmatrix} 1 & 0 & 0 & 0 \\ \\ 0 & 0 & 1 & 0 0 & 1 & 0 & \\ \\ 0 \\ \\ 0 & 0 & 0 & 1 \end{bmatrix}, \end{align}


    여기에서 행과 열은 퀀텀 개념 가이드에서로 정렬 됩니다.
- uid: microsoft.quantum.intrinsic.t
  summary: T 게이트를 단일의 비트에 적용 합니다.
- uid: microsoft.quantum.intrinsic.x
  summary: >-
    Pauli $X $ gate에 적용 합니다.


    \begin{align} \ sigma_x \mathrel{: =} \begin{bmatrix} 0 & 1 \\ \\ 1 & 0 \end{bmatrix}.

    \end{align}
- uid: microsoft.quantum.intrinsic.y
  summary: >-
    Pauli $Y $ gate에 적용 합니다.


    \begin{align} \ sigma_y \mathrel{: =} \begin{bmatrix} 0 &-i \\ \\ i & 0 \end{bmatrix}.

    \end{align}
- uid: microsoft.quantum.intrinsic.z
  summary: >-
    Pauli $Z $ gate에 적용 합니다.


    \begin{align} \ sigma_z \mathrel{: =} \begin{bmatrix} 1 & 0 \\ \\ 0 &-1 \end{bmatrix}.

    \end{align}
metadata:
  ms.openlocfilehash: c0be1da035393f32fa2949214d79ecb8a4c5ccb3
  ms.sourcegitcommit: a3775921db1dc5c653c97b8fa8fe2c0ddd5261ff
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 07/02/2020
  ms.locfileid: "85885229"
