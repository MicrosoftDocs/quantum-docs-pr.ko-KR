### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingtransformation
name: ApplyPermutationUsingTransformation
type: operation
namespace: Microsoft.Quantum.Synthesis
summary: >-
  변형 기반 합성을 사용 하 여 순열 Permutes 퀀텀 상태에서 amplitudes를 지정 합니다.


  이 절차에서는 단방향 변환 기반 합성 방식을 구현 합니다.  입력은 $2 ^ n $ elements $ \{ 0, \pi, 2 ^ n-1 $을 통한 순열 $ \pi $ \} 로, $n $-변수가 해독 가능한 부울 함수를 나타냅니다.

  알고리즘은 다음 단계를 반복적으로 수행 합니다.


  1. $X \ne \ pi (x) = y $와 같은 가장 작은 $x $를 찾습니다.

  2. 출력에 적용 되는 여러 제어 된 Toffoli 작업을 찾습니다. $ \pi (x) = x $를 사용 하 고 모든 $x ' < x $에 대해 $ \pi (x ') $를 변경 하지 않습니다.
examples: >-
  작업을 합성 하려면 `SWAP` :


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingTransformation([0, 2, 1, 3], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingTransformation (perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: >-
  - [*D. Michael*, *Dmitri Maslov*, *Gerhard Dueck*318-323 2003,,,, 2003](https://doi.org/10.1145/775832.775915)

  - [*Mathias Soeken*, *Gerhard, Dueck*, *dmichael*, Proc .rc 2016, Springer, pp. 307-321, 2016](https://doi.org/10.1007/978-3-319-40578-0_22)
input:
  content: '(perm : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: 0부터 시작 하는 $2 ^ n $ 요소의 순열입니다.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: 순열이 적용 되는 $ 이상 비트 $n 목록입니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecomposition
metadata:
  ms.openlocfilehash: e611197ba2fbfc0271c17664acc23b4de2c90ff6
  ms.sourcegitcommit: a3775921db1dc5c653c97b8fa8fe2c0ddd5261ff
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 07/02/2020
  ms.locfileid: "85886577"
