### YamlMime:QSharpType
uid: microsoft.quantum.canon.controlledonbitstring
name: ControlledOnBitString
type: function
namespace: Microsoft.Quantum.Canon
summary: >-
  컨트롤 레지스터 상태가 지정 된 비트 마스크에 해당 하는 경우 대상 레지스터에 oracle을 적용 하는 단일 연산자를 반환 합니다.


  이 함수의 출력은 \begin{align} U \ket{b_0 b_1 \cdots b_ {n-1}} \ket{\psi} = \ket{b_0 b_1 \cdots b_ {n-1}} \cdots와 같은 단일 변환 $U $로 나타낼 수 있습니다. V \ket{\psi} & \t extrm{if} (b_0 b_1 \cdots b_ {n-1}) = \texttt{bits} \\\\ \ket{\psi} & \textrm{otherwise} \end{cases}, \end{align} 여기서 $V $은 `oracle` 작업의 동작을 나타내는 단일 변환입니다.
remarks: >-
  `bits`와 `controlRegister`의 길이는 동일 해야 합니다.


  부울 배열 `bits` 및 단일 작업 `oracle`지정 된이 함수의 출력은 다음 단계를 수행 하는 작업입니다.


  * `bits`의 `false` 요소에 해당 하는 컨트롤 레지스터의 각 요소에 `X` 작업을 적용 합니다.

  * 컨트롤 및 대상 레지스터에 `Controlled oracle`을 적용 합니다.

  * `bits`의 `false` 요소에 해당 하는 컨트롤 레지스터의 각 요소에 `X` 작업을 적용 하 여 컨트롤을 원래 상태로 되돌립니다.


  `Controlled` 함수 출력은 `bits` `[true, ..., true]`와 같은 특수 한 `ControlledOnBitString` 사례입니다.
examples: >-
  다음 코드 조각은 동일 합니다.


  ```qsharp

  (ControlledOnBitString(bits, oracle))(controlRegister, targetRegister);

  ```


  and


  ```qsharp

  within {
      ApplyPauliFromBitString(PauliX, false, bits, controlRegister);
  } apply {
      Controlled oracle(controlRegister, targetRegister);
  }

  ```


  다음 코드는 $ \frac{1}{2}(\ket{00}-\ket{01} + \ket{10} + \ket{11}) $ 상태를 준비 합니다.


  ```qsharp

  using (register = Qubit[2]) {
      ApplyToEach(H, register);
      (ControlledOnBitString([false], Z))(register[0..0], register[1]);
  }

  ```
syntax: "function ControlledOnBitString (bits : Bool[], oracle : ('T => Unit is Adj + Ctl)) : ((Qubit[], 'T) => Unit is Adj + Ctl)"
input:
  content: "(bits : Bool[], oracle : ('T => Unit is Adj + Ctl))"
  types:
  - name: bits
    summary: 지정 된 단일 연산자를 제어할 비트 문자열입니다.
    isArray: true
    isPrimitive: true
    uid: Bool
  - name: oracle
    summary: 대상 레지스터에 적용할 단일 연산자입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
output:
  content: ((Qubit[], 'T) => Unit is Adj + Ctl)
  types:
  - summary: 컨트롤 레지스터 상태가 비트 마스크 `bits`에 해당 하는 경우 대상 레지스터에 `oracle`를 적용 하는 단일 연산자입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: dde246a6eb0cf5e278cd079ff52c3a0b0ff71120
  ms.sourcegitcommit: b7e205aaa7fa1ca9f0daa163e46154945f4bc965
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 02/18/2020
  ms.locfileid: "77441047"
