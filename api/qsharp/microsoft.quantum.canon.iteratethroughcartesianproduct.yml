### YamlMime:QSharpType
uid: microsoft.quantum.canon.iteratethroughcartesianproduct
name: IterateThroughCartesianProduct
type: operation
namespace: microsoft.quantum.canon
summary: >-
  여러 범위의 데카르트 곱에서 각 인덱스에 대 한 작업을 적용 합니다.


  `0..(bounds[0] - 1)`, `0..(bounds[1] - 1)` , ...,,, ...,의 데카르트 곱의 각 요소에 대 한 작업을 반복적으로 적용 합니다.`0..(bounds[Length(bounds) - 1] - 1)`
examples: >-
  작업을 지정 하는 경우 `op` 다음 두 코드 조각이 동일 합니다.


  ```Q#

  IterateThroughCartesianProduct([3, 4, 5], op);

  ```


  ```Q#

  op([0, 0, 0]);

  op([1, 0, 0]);

  op([2, 0, 0]);

  op([0, 1, 0]);

  // ...

  op([0, 3, 0]);

  op([0, 0, 1]);

  //

  op([2, 3, 4]);

  ```
syntax: 'operation IterateThroughCartesianProduct (bounds : Int[], op : (Int[] => Unit)) : Unit'
input:
  content: '(bounds : Int[], op : (Int[] => Unit))'
  types:
  - name: bounds
    summary: 반복할 범위를 지정 하 고 각 범위를 정수 길이로 지정 하는 배열입니다.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: op
    summary: 지정 된 데카르트 곱의 각 요소에 대해 호출 되는 작업입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Int
    output:
      types:
      - isPrimitive: true
        uid: Unit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
seeAlso:
- microsoft.quantum.canon.iteratethroughcartesianpower
metadata:
  ms.openlocfilehash: e5642f578adac599c48599aa400791ffb2c44dfb
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91470966"
