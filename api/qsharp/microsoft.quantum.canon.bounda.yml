### YamlMime:QSharpType
uid: microsoft.quantum.canon.bounda
name: BoundA
type: function
namespace: microsoft.quantum.canon
summary: >-
  단일 입력에 대해 작동 하는 작업 배열이 지정 된 경우 지정 된 각 작업을 순서 대로 수행 하는 새 작업을 생성 합니다.

  한정자는 `A` 배열의 모든 작업이 adjointable을 나타냅니다.
examples: >-
  다음은 동일 합니다.


  ```qsharp

  let bound = BoundA([U, V]);

  bound(x);

  ```


  및


  ```qsharp

  U(x); V(x);

  ```
syntax: "function BoundA (operations : ('T => Unit is Adj)[]) : ('T => Unit is Adj)"
input:
  content: "(operations : ('T => Unit is Adj)[])"
  types:
  - name: operations
    summary: 지정 된 입력에 대해 수행할 일련의 작업입니다.
    isArray: true
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
output:
  content: ('T => Unit is Adj)
  types:
  - summary: 지정 된 각 작업을 입력에 대해 순서 대로 수행 하는 새 작업입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
typeParameters:
- uid: "'T"
  summary: 배열의 각 작업이 작동 하는 대상입니다.
seeAlso:
- microsoft.quantum.canon.bound
metadata:
  ms.openlocfilehash: afe13c10e780e96708c59e64c2aa94b1f53ff6a8
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91472275"
