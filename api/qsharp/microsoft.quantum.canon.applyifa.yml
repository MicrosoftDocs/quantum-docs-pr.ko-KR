### YamlMime:QSharpType
uid: microsoft.quantum.canon.applyifa
name: ApplyIfA
type: operation
namespace: microsoft.quantum.canon
summary: >-
  클래식 비트에 adjointable 작업 조건 화 된을 적용 합니다.


  작업 `op` 및 비트 값이 지정 된 `bit` `op` `target` 경우가 인 경우에 적용 됩니다 `bit` `true` . 이면이 `false` 발생 하지 않습니다 `target` .

  접미사는 `A` 적용 될 작업이 adjointable을 나타냅니다.
examples: >-
  다음은 값의 배열로 지정 된 기존 비트 문자열로 표현 되는 계산 기준 상태로 값의 레지스터를 준비 합니다 `Bool` .


  ```Q#

  let bitstring = [true, false, true];

  using (register = Qubit(3)) {
      ApplyToEach(ApplyIf(X, _, _), Zip(bitstring, register));
      // register should now be in the state |101⟩.
      ...
  }

  ```
syntax: "operation ApplyIfA (op : ('T => Unit is Adj), bit : Bool, target : 'T) : Unit"
input:
  content: "(op : ('T => Unit is Adj), bit : Bool, target : 'T)"
  types:
  - name: op
    summary: 조건부로 적용 될 작업입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
  - name: bit
    summary: op가 적용 되는지 여부를 제어 하는 부울입니다.
    isPrimitive: true
    uid: Bool
  - name: target
    summary: 작업이 적용 되는 입력입니다.
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 조건부로 적용할 작업의 입력 형식입니다.
functors:
- Adjoint
seeAlso:
- microsoft.quantum.canon.applyifc
- microsoft.quantum.canon.applyifa
- microsoft.quantum.canon.applyifca
metadata:
  ms.openlocfilehash: f020deb737a40a8a31284aded74a07b3e79469bf
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89350543"
