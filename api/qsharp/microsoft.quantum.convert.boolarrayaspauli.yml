### YamlMime:QSharpType
uid: microsoft.quantum.convert.boolarrayaspauli
name: BoolArrayAsPauli
type: function
namespace: microsoft.quantum.convert
summary: 비트 문자열이 지정 된 경우 단일 수준 비트 Pauli 연산자의 배열로 표시 되는 다중 값 비트 Pauli 연산자를 반환 합니다.
remarks: 부울 배열과 퀀텀 레지스터의 길이는 같아야 합니다.
syntax: 'function BoolArrayAsPauli (pauli : Pauli, bitApply : Bool, bits : Bool[]) : Pauli[]'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[])'
  types:
  - name: pauli
    summary: 에 적용 되는 pauli 연산자 `bitsApply == bits[idx]` .
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: bit가이 값 이면 Pauli를 적용 합니다.
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: 부울 배열입니다.
    isArray: true
    isPrimitive: true
    uid: Bool
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: 4481610f1f068bfc6c1bfc9d5de98ad125ae389e
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91481421"
