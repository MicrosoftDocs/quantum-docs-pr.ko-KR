### YamlMime:QSharpType
uid: microsoft.quantum.convert.boolarrayaspauli
name: BoolArrayAsPauli
type: function
namespace: Microsoft.Quantum.Convert
summary: 비트 문자열이 지정 된 경우 단일 수준 비트 Pauli 연산자의 배열로 표시 되는 다중 값 비트 Pauli 연산자를 반환 합니다.
remarks: 부울 배열과 퀀텀 레지스터의 길이는 같아야 합니다.
syntax: 'function BoolArrayAsPauli (pauli : Pauli, bitApply : Bool, bits : Bool[]) : Pauli[]'
input:
  content: '(pauli : Pauli, bitApply : Bool, bits : Bool[])'
  types:
  - name: pauli
    summary: 에 적용 되는 `bitsApply == bits[idx]`pauli 연산자.
    isPrimitive: true
    uid: Pauli
  - name: bitApply
    summary: bit가이 값 이면 Pauli를 적용 합니다.
    isPrimitive: true
    uid: Bool
  - name: bits
    summary: 부울 배열입니다.
    isArray: true
    isPrimitive: true
    uid: Bool
output:
  content: Pauli[]
  types:
  - isArray: true
    isPrimitive: true
    uid: Pauli
metadata:
  ms.openlocfilehash: c4f43eb0a30e42b6deb28c9910b1c95454b827c8
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82661367"
