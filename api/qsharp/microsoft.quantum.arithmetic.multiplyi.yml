### YamlMime:QSharpType
uid: microsoft.quantum.arithmetic.multiplyi
name: MultiplyI
type: operation
namespace: Microsoft.Quantum.Arithmetic
summary: '`xs` 정수를 정수로 `ys` 곱하고 처음에 0 이어야 하 `result`는에 결과를 저장 합니다.'
remarks: >-
  표준 시프트 및 추가 방법을 사용 하 여 곱셈을 구현 합니다.

  제어 된 버전 $x _i $을 (를) 컨트롤의 ancilla verbit 조건 화 된로 복사 하 고 ancilla verbit에서 더하기를 제어 하 여 향상 되었습니다.
syntax: 'operation MultiplyI (xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(xs : Microsoft.Quantum.Arithmetic.LittleEndian, ys : Microsoft.Quantum.Arithmetic.LittleEndian, result : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: xs
    summary: $n $-bit multiplicand (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: ys
    summary: $n $ 비트 승수 (LittleEndian)
    uid: microsoft.quantum.arithmetic.littleendian
  - name: result
    summary: $2n $-bit result (LittleEndian)는 $ \ket{0}$ 상태 여야 합니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: fcb55b47c0d5ca82736e8c3da14190daffd2b414
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82679483"
