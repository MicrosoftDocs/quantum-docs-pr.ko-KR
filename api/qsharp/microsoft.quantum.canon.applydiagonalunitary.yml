### YamlMime:QSharpType
uid: microsoft.quantum.canon.applydiagonalunitary
name: ApplyDiagonalUnitary
type: operation
namespace: microsoft.quantum.canon
summary: >-
  일련의 복잡 한 단계 배열을 다양 한 양의 레지스터의 숫자 기반 상태에 적용 합니다.


  이 작업에서는 $n $-stbit number state $ \ket{j} $에 $e ^ {i \ theta_j} $ 복합 단계를 적용 하는 대각선을 구현 합니다.

  특히이 작업은 단일 개체로 나타낼 수 있습니다.


  $ $ \begin{align} U = \sum ^ {2 ^ n-1} _ {j = 0} e ^ {i \ theta_j} \ket{j}\bra{j}.

  \end{align} $ $
remarks: '`coefficients` $2 ^ n $ 미만으로 지정 된 경우는 $ \ theta_j = $0.0 요소로 채워집니다.'
syntax: 'operation ApplyDiagonalUnitary (coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
references: '- 퀀텀 논리 회로 Vivek Shende, Stephen S. Markov, Igor, Igor L. https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Double[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: coefficients
    summary: 최대 $2 ^ n $ 계수 $ \ theta_j $의 배열입니다. $J $ th 계수는 작은 endian 형식으로 인코딩된 number state $ \ket{j} $를 인덱싱합니다.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: qubits
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- approximatelyapplydiagonalunitary
metadata:
  ms.openlocfilehash: 27e76c502bae5b9f23f876ec2b21ce34ba9657a1
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91473516"
