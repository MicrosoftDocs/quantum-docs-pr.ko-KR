### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingtoreflection
name: BlockEncodingToReflection
type: function
namespace: Microsoft.Quantum.Simulation
summary: >-
  `BlockEncoding`를 해당 하는 `BLockEncodingReflection`으로 변환 합니다.


  즉, 특정 연산자 $H $로 인코딩하는 `BlockEncoding` 단일 $U $ 인 경우, 같은 연산자를 인코딩하는 `BlockEncodingReflection` $U ' $로 변환 하 고 ' ^ \aa= U ' $를 충족 합니다.

  그러면 $U $의 보조 레지스터 크기가 1 배 비트로 늘어납니다.
remarks: 그러면 $U $의 보조 레지스터 크기가 1 배 비트로 늘어납니다.
syntax: 'function BlockEncodingToReflection (blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
references: '- Hamiltonian 시뮬레이션의 Guang Jia-hao Low, Isaac Chuang https://arxiv.org/abs/1610.06546'
input:
  content: '(blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding)'
  types:
  - name: blockEncoding
    summary: 리플렉션으로 변환할 `BlockEncoding` 단일 $U $입니다.
    uid: microsoft.quantum.simulation.blockencoding
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: 단일 $U ' $는 레지스터 `a` 및 $H $를 차단 하 고 $U ' ^ \a턴 = U ' $를 만족 하는 `s` 합니다.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: 47eba3c59ef30f89139830aa4d9b98d22d141d8f
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73065625"
