### YamlMime:QSharpType
uid: microsoft.quantum.simulation.blockencodingtoreflection
name: BlockEncodingToReflection
type: function
namespace: microsoft.quantum.simulation
summary: >-
  을 해당 하는으로 변환 합니다 `BlockEncoding` `BLockEncodingReflection` .


  즉, 특정 `BlockEncoding` $H 연산자 ($)를 인코딩하는 단일 $U $가 지정 된 경우,이 연산자를 `BlockEncodingReflection` 동일한 연산자를 인코딩하는 $U ' $로 변환 하 고, $U ' ^ \A턴 = U ' $를 충족 합니다.

  그러면 $U $의 보조 레지스터 크기가 1 배 비트로 늘어납니다.
remarks: 그러면 $U $의 보조 레지스터 크기가 1 배 비트로 늘어납니다.
syntax: 'function BlockEncodingToReflection (blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding) : Microsoft.Quantum.Simulation.BlockEncodingReflection'
references: '- Hamiltonian 시뮬레이션의 Guang Jia-hao Low, Isaac Chuang https://arxiv.org/abs/1610.06546'
input:
  content: '(blockEncoding : Microsoft.Quantum.Simulation.BlockEncoding)'
  types:
  - name: blockEncoding
    summary: '`BlockEncoding`리플렉션으로 변환할 단일 $U $입니다.'
    uid: microsoft.quantum.simulation.blockencoding
output:
  content: Microsoft.Quantum.Simulation.BlockEncodingReflection
  types:
  - summary: 단일 $U ' $는 레지스터에 대해 공동으로 작동 `a` 하며 `s` $H $를 차단 하 고 $U ' ^ \A턴 = U ' $를 충족 합니다.
    uid: microsoft.quantum.simulation.blockencodingreflection
seeAlso:
- microsoft.quantum.canon.blockencoding
- microsoft.quantum.canon.blockencodingreflection
metadata:
  ms.openlocfilehash: d724ebc89bfe6550baa4c57de45c089d028d87f4
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91491778"
