### YamlMime:QSharpType
uid: microsoft.quantum.canon.applypauli
name: ApplyPauli
type: operation
namespace: microsoft.quantum.canon
summary: 여러 기능을 제공 하는 경우 해당 작업을 레지스터에 적용 합니다.
examples: >-
  다음은 동일 합니다.


  ```qsharp

  ApplyPauli([PauliY, PauliZ, PauliX], target);

  ```


  및


  ```qsharp

  Y(target[0]);

  Z(target[1]);

  X(target[2]);

  ```
syntax: 'operation ApplyPauli (pauli : Pauli[], target : Qubit[]) : Unit'
input:
  content: '(pauli : Pauli[], target : Qubit[])'
  types:
  - name: pauli
    summary: 단일 수준 비트 Pauli 연산자의 배열로 표현 되는 다중 기능 비트 Pauli 연산자입니다.
    isArray: true
    isPrimitive: true
    uid: Pauli
  - name: target
    summary: 등록 하 여 지정 된 Pauli 작업을 적용 합니다.
    isArray: true
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 7f3b7d5394ffee1064f7ab26738ca3ab0927b5c4
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91472624"
