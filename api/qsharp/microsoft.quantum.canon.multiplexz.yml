### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexz
name: MultiplexZ
type: operation
namespace: Microsoft.Quantum.Canon
summary: >-
  조건 화 된 배열에 Pauli Z 회전을 적용 합니다.


  이렇게 하면 $ \ket{j} $ $n에서 제어 하는 경우 $ \theta_j $에 대 한 각도 $ \theta_j $ 정보 1 $Z $를 기준으로 회전을 수행 하는 곱하기 제어 된 단일 $U 작업을 적용 합니다.


  $U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j}\otimes e ^ {i Z \theta_j} $.
remarks: $2 ^ n $ 보다 작은 값을 지정 하면 `coefficients`은 $ \theta_j = $0.0 요소로 채워집니다.
syntax: 'operation MultiplexZ (coefficients : Double[], control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
references: '- 퀀텀 논리 회로 Vivek Shende, Stephen S., Markov https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Double[], control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: 최대 $2 ^ n $ 계수의 $ \theta_j $의 배열입니다. $J $ th 계수는 작은 endian 형식으로 인코딩된 number state $ \ket{j} $를 인덱싱합니다.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: control
    summary: 숫자 상태 $ \ket{j} $를 거의 endian 형식으로 인코딩하는 $-# 컨트롤 레지스터를 $n 합니다.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $E ^ {i P \theta_j} $로 회전 한 단일 비트 레지스터입니다.
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: 7098b849ea730b46b4cc3039520ef2b040d43d34
  ms.sourcegitcommit: edcf15044d7bdf4f8b21fb8f6af4bde475eb13a0
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 11/05/2019
  ms.locfileid: "73222700"
