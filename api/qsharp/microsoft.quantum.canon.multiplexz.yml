### YamlMime:QSharpType
uid: microsoft.quantum.canon.multiplexz
name: MultiplexZ
type: operation
namespace: microsoft.quantum.canon
summary: >-
  조건 화 된 배열에 Pauli Z 회전을 적용 합니다.


  이렇게 하면 $ \ theta_j $ 각도에 따라 회전을 수행 하는 곱하기 제어 된 단일 연산이 적용 됩니다 ($n $-stbit number state $ \ket{j} $로 제어 되는 경우 $Z).

  특히이 작업은 단일 개체로 나타낼 수 있습니다.


  $ $ \begin{align} U = \sum ^ {2 ^ n-1} _ {j = 0} \ket{j}\bra{j} \otimes e ^ {i Z \ theta_j}.

  \end{align} $ $
remarks: '`coefficients` $2 ^ n $ 미만으로 지정 된 경우는 $ \ theta_j = $0.0 요소로 채워집니다.'
syntax: 'operation MultiplexZ (coefficients : Double[], control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit) : Unit'
references: '- 퀀텀 논리 회로 Vivek Shende, Stephen S. Markov, Igor, Igor L. https://arxiv.org/abs/quant-ph/0406176'
input:
  content: '(coefficients : Double[], control : Microsoft.Quantum.Arithmetic.LittleEndian, target : Qubit)'
  types:
  - name: coefficients
    summary: 최대 $2 ^ n $ 계수 $ \ theta_j $의 배열입니다. $J $ th 계수는 작은 endian 형식으로 인코딩된 number state $ \ket{j} $를 인덱싱합니다.
    isArray: true
    isPrimitive: true
    uid: Double
  - name: control
    summary: 숫자 상태 $ \ket{j} $를 거의 endian 형식으로 인코딩하는 $-# 컨트롤 레지스터를 $n 합니다.
    uid: microsoft.quantum.arithmetic.littleendian
  - name: target
    summary: $E ^ {i P \ theta_j} $로 회전 한 단일 비트 레지스터입니다.
    isPrimitive: true
    uid: Qubit
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- approximatelymultiplexz
metadata:
  ms.openlocfilehash: a85dc67825fc206484c32ef5c5b75e88ddb67e08
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91466835"
