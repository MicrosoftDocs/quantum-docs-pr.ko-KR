### YamlMime:QSharpType
uid: microsoft.quantum.canon.applywithca
name: ApplyWithCA
type: operation
namespace: microsoft.quantum.canon
summary: >-
  두 작업을 수행 하는 경우 conjugated로 다른 작업을 적용 합니다.


  $U $ 및 $V $와 같은 단일 연산자에 의해 각각 설명 된 두 개의 작업은 ^ {\dagger} V U $ $U 시퀀스에 적용 됩니다. 즉,이 작업은 $U $와 $V $ conjugated에서 제공 하는 단일 연산자를 구현 합니다.
remarks: 외부 작업은 항상 adjointable으로 간주 되지만 결합 된 작업을 제어 하기 위해 제어 하지 않아도 됩니다.
syntax: "operation ApplyWithCA (outerOperation : ('T => Unit is Adj), innerOperation : ('T => Unit is Adj + Ctl), target : 'T) : Unit"
input:
  content: "(outerOperation : ('T => Unit is Adj), innerOperation : ('T => Unit is Adj + Ctl), target : 'T)"
  types:
  - name: outerOperation
    summary: $U $는 켤레 $V $로 사용 해야 합니다. 외부 작업 $U $은 (는) adjointable 해야 하지만 제어할 필요가 없습니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
  - name: innerOperation
    summary: 작업 $V $가 conjugated입니다.
    isOperation: true
    input:
      types:
      - uid: "'T"
        isLocal: true
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
  - name: target
    summary: 외부 및 내부 작업에 제공 되는 입력입니다.
    uid: "'T"
    isLocal: true
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
typeParameters:
- uid: "'T"
  summary: 각 내부 및 외부 작업이 작동 하는 대상입니다.
functors:
- Adjoint
- Controlled
seeAlso:
- applywith
- applywitha
- applywithc
metadata:
  ms.openlocfilehash: d1cdd3e6752f7296d9c18a887853d2dc721fc791
  ms.sourcegitcommit: d6ac6f4345be0dd68f1bcd944f44b08e7a3cf346
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/02/2020
  ms.locfileid: "89357173"
