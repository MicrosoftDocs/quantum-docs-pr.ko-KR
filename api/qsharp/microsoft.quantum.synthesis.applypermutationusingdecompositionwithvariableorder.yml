### YamlMime:QSharpType
uid: microsoft.quantum.synthesis.applypermutationusingdecompositionwithvariableorder
name: ApplyPermutationUsingDecompositionWithVariableOrder
type: operation
namespace: microsoft.quantum.synthesis
summary: >-
  분해 기반 합성을 사용 하 여 순열 Permutes 퀀텀 상태에서 amplitudes를 지정 합니다.


  이 작업은 @"microsoft.quantum.synthesis.applypermutationusingdecomposition" 변수 순서를 지정할 수 있는 보다 일반적인 버전의입니다. 다른 변수 순서는 제어 되는 게이트에 사용 되는 분해 시퀀스와 진위 테이블을 변경 합니다 @"microsoft.quantum.intrinsic.x" .  따라서 변수 순서를 변경 하면 순열 실현에 사용 되는 전체 게이트 수가 변경 됩니다.
examples: >-
  작업을 합성 하려면 `SWAP` :


  ```Q#

  using (qubits = Qubit[2]) {
    ApplyPermutationUsingDecompositionWithVariableOrder([0, 2, 1, 3], [1, 0], LittleEndian(qubits));
  }

  ```
syntax: 'operation ApplyPermutationUsingDecompositionWithVariableOrder (perm : Int[], variableOrder : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(perm : Int[], variableOrder : Int[], qubits : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: perm
    summary: 0부터 시작 하는 $2 ^ n $ 요소의 순열입니다.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: variableOrder
    summary: 0부터 시작 하는 $n $ 요소의 순열입니다.
    isArray: true
    isPrimitive: true
    uid: Int
  - name: qubits
    summary: 순열이 적용 되는 $ 이상 비트 $n 목록입니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
seeAlso:
- microsoft.quantum.synthesis.applypermutationusingdecomposition
- microsoft.quantum.synthesis.applypermutationusingtransformation
metadata:
  ms.openlocfilehash: 294eac666a4334ce484f545606dfc65b91a3478e
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91482526"
