### YamlMime:QSharpType
uid: microsoft.quantum.preparation.prepareuniformsuperposition
name: PrepareUniformSuperposition
type: operation
namespace: microsoft.quantum.preparation
summary: >-
  0부터까지 인코딩하는 상태에 대 한 균일 한 superposition를 만듭니다 `nIndices - 1` .


  즉,이 단일 $U $는 입력 상태가 $ \ket{0\cdots 0} $ 인 경우 $0 $에서 $1 $M까지 모든 숫자 상태에 대 한 균일 한 superposition를 만듭니다. 즉, $ $ \begin{align} U\ket {0} = \frac {1} {\sqrt{m}}\ sum_ {j = 0} ^ {M-1} \ket{j}.

  \end{align} $ $.
remarks: 작업은 adjointable 이지만, `indexRegister` 이 경우에는 첫 번째 기준 상태에서가 균일 한 superposition에 있어야 `nIndices` 합니다.
examples: >-
  다음 예에서는 {1} $3 $ stbits에서 $ \frac {\sqrt {6} } \ sum_ {j = 0} ^ \ket{j} $ 상태를 준비 합니다 {5} .


  ```Q#

  let nIndices = 6;

  using(indexRegister = Qubit[3]) {
      PrepareUniformSuperposition(nIndices, LittleEndian(indexRegister));
      // ...
  }

  ```
syntax: 'operation PrepareUniformSuperposition (nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian) : Unit'
input:
  content: '(nIndices : Int, indexRegister : Microsoft.Quantum.Arithmetic.LittleEndian)'
  types:
  - name: nIndices
    summary: Uniform superposition에서 원하는 상태 수 $M $입니다.
    isPrimitive: true
    uid: Int
  - name: indexRegister
    summary: >-
      숫자 상태를 형식으로 저장 하는? `LittleEndian`

      이 레지스터는 $M-$1 수를 저장할 수 있어야 하며, $ \ket{0\cdots 0} $ 상태에서 초기화 되는 것으로 간주 됩니다.
    uid: microsoft.quantum.arithmetic.littleendian
output:
  content: Unit
  types:
  - isPrimitive: true
    uid: Unit
functors:
- Adjoint
- Controlled
metadata:
  ms.openlocfilehash: ff1e1e50992b209865c4e3b1c82e9faec9199d58
  ms.sourcegitcommit: 685a8ab16d7e6a25e63a168d6e7c385fa6e876cc
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 09/29/2020
  ms.locfileid: "91485399"
