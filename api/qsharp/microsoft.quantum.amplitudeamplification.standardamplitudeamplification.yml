### YamlMime:QSharpType
uid: microsoft.quantum.amplitudeamplification.standardamplitudeamplification
name: StandardAmplitudeAmplification
type: function
namespace: Microsoft.Quantum.AmplitudeAmplification
summary: 표준 진폭 증폭 알고리즘
remarks: 이는 `AmpAmpPhasesStandard` \begin{align} A\ket{0}\_{f} \ket{0}\_s = \lambda\ket{1}\_f\ket {\ text {target}}\_s + \sqrt{1-| \lambda | ^ 2} \ket{0}\_f\cdots로 가정 하 여 계산 된 리플렉션 단계 중에서 가져온 표준 진폭 증폭 알고리즘입니다 .이 작업을 \end{align} 대부분의 경우 \begin{align}{0}\_\operatorname{AmpAmpByOracle}\ket {f}{0}\_\ket s = \lambda ((2n + 1) \lambda{-1}^ (\lambda)){1}\_\ket f\ket {\ text {target}\_} s +{0}\_\cdots\ket f \end{align}을 준비 하 `flagQubit` 고 `auxiliaryRegister` ,{0}\_상태 $ \ket f\ket{0}\_a $에서 초기화 됩니다.
syntax: 'function StandardAmplitudeAmplification (nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int) : (Qubit[] => Unit is Adj + Ctl)'
references: '- [*G. Brtis, Hoyer, M. Mosca, .Ttapp*](https://arxiv.org/abs/quant-ph/0005055)'
input:
  content: '(nIterations : Int, stateOracle : Microsoft.Quantum.Oracles.StateOracle, idxFlagQubit : Int)'
  types:
  - name: nIterations
    summary: 진폭 증폭의 $ $n 반복 횟수
    isPrimitive: true
    uid: Int
  - name: stateOracle
    uid: microsoft.quantum.oracles.stateoracle
  - name: idxFlagQubit
    summary: 플래그에 대 한 인덱스입니다.
    isPrimitive: true
    uid: Int
output:
  content: (Qubit[] => Unit is Adj + Ctl)
  types:
  - summary: 표준 진폭 증폭 퀀텀 알고리즘을 구현 하는 작업입니다.
    isOperation: true
    input:
      types:
      - isArray: true
        isPrimitive: true
        uid: Qubit
    output:
      types:
      - isPrimitive: true
        uid: Unit
    functors:
    - Adjoint
    - Controlled
metadata:
  ms.openlocfilehash: 0fc7ceb390a64ce6224a084147207663d96c3b75
  ms.sourcegitcommit: db23885adb7ff76cbf8bd1160d401a4f0471e549
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/01/2020
  ms.locfileid: "82676924"
